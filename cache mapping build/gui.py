
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
import tkinter as tk
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, ttk


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"D:\Cache Mapping GUI\cache mapping build\assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

####################################################

#MAP BUTTON CLICK
def submit_button_clicked():
    selected_memory_size = ms_var.get()
    selected_cache_size = cs_var.get()
    selected_block_size = bs_var.get()
    selected_radio = radio_var.get()
    selected_set_size = ss_var.get()
    
    # ----------- DIRECT MAPPING -----------

    if selected_radio == "Option 1":

        #Memory Size
        canvas.itemconfig(mem, text="Memory Size (MS)")
        canvas.itemconfig(equal_mem1, text="=")
        canvas.itemconfig(equal_mem2, text="=")
        canvas.itemconfig(two_mem1, text="2")
        canvas.itemconfig(mul_mem, text="x")
        canvas.itemconfig(two_mem2, text="2")
        canvas.itemconfig(equal_mem3, text="=")
        canvas.itemconfig(two_mem3, text="2")
        canvas.itemconfig(line_mem, text=".............")

        #Physical Address
        canvas.itemconfig(pa, text="Physical Address (PA)")
        canvas.itemconfig(equal_pa, text="=")
        canvas.itemconfig(bits_pa, text="bits")

        #Cache Size
        canvas.itemconfig(cache, text="Cache Size (CS)")
        canvas.itemconfig(equal_c1, text="=")
        canvas.itemconfig(equal_c2, text="=")
        canvas.itemconfig(two_c1, text="2")
        canvas.itemconfig(mul_c, text="x")
        canvas.itemconfig(two_c2, text="2")
        canvas.itemconfig(equal_c3, text="=")
        canvas.itemconfig(two_c3, text="2")

        #Block Size
        canvas.itemconfig(block, text="Block Size (BS)")
        canvas.itemconfig(equal_b1, text="=")
        canvas.itemconfig(equal_b2, text="=")
        canvas.itemconfig(two_b1, text="2")
        canvas.itemconfig(mul_b, text="x")
        canvas.itemconfig(two_b2, text="2")
        canvas.itemconfig(equal_b3, text="=")
        canvas.itemconfig(two_b3, text="2")
        canvas.itemconfig(line_block, text=".............")
        
        #Block Offset
        canvas.itemconfig(bo, text="Block Offset (BO)")
        canvas.itemconfig(equal_bo, text="=")
        canvas.itemconfig(bits_bo, text="bits")

        #Cache Line
        canvas.itemconfig(cache_line, text="Cache Line (CL)")
        canvas.itemconfig(equal_cl1, text="=")
        canvas.itemconfig(for_cl, text="CS/BS")
        canvas.itemconfig(equal_cl2, text="=")
        canvas.itemconfig(two_cl1, text="2")
        canvas.itemconfig(div, text="_____")
        canvas.itemconfig(two_cl2, text="2")
        canvas.itemconfig(equal_cl3, text="=")
        canvas.itemconfig(two_cl3, text="2")
        canvas.itemconfig(line_linenum, text=".............................")

        #Line Number
        canvas.itemconfig(ln, text="Line Number (LN)")
        canvas.itemconfig(equal_ln, text="=")
        canvas.itemconfig(bits_ln, text="bits")

        #Tag
        canvas.itemconfig(tagging, text="Tag")
        canvas.itemconfig(equal_tag1, text="=")
        canvas.itemconfig(for_tag, text="PA - ( BO + LN )")
        canvas.itemconfig(equal_tag2, text="=")
        canvas.itemconfig(minus, text="-")
        canvas.itemconfig(left, text="(")
        canvas.itemconfig(plus, text="+")
        canvas.itemconfig(right, text=")")
        canvas.itemconfig(equal_tag3, text="=")
        canvas.itemconfig(bits_tag, text="bits")

        #Tag Directory Size
        canvas.itemconfig(tag_size_title, text="Tag Directory Size")
        canvas.itemconfig(equal_tds1, text="=")
        canvas.itemconfig(for_tds, text="Tag x CL")
        canvas.itemconfig(equal_tds2, text="=")
        canvas.itemconfig(mul_tds, text="x")
        canvas.itemconfig(two_tds, text="2")
        canvas.itemconfig(bits_tds, text="bits")

        #Cache Set
        canvas.itemconfig(cache_set, text="")
        canvas.itemconfig(equal_cs1, text="")
        canvas.itemconfig(for_cs, text="")
        canvas.itemconfig(equal_cs2, text="")
        canvas.itemconfig(two_cs1, text="")
        canvas.itemconfig(div_css, text="")
        canvas.itemconfig(two_cs2, text="")
        canvas.itemconfig(equal_cs3, text="")
        canvas.itemconfig(two_cs3, text="")
        canvas.itemconfig(line_setnum, text="")

        #Set Number
        canvas.itemconfig(setnum, text="")
        canvas.itemconfig(equal_sn, text="")
        canvas.itemconfig(bits_sn, text="")

        ####################################################

        #MAIN MEMORY VIEW

        canvas.itemconfig(bits_block_location, text="bits")
        canvas.itemconfig(bits_block_offset, text="bits")

        #CACHE VIEW

        canvas.itemconfig(bits_tagging, text="bits")
        canvas.itemconfig(bits_line_number, text="bits")
        canvas.itemconfig(bits_block_offset_cache, text="bits")
        canvas.itemconfig(dm_view, text="Line")
        canvas.itemconfig(sa_view, text="")

        ####################################################

        #update memory text
        if selected_memory_size == "256KB":
            canvas.itemconfig(memory_text, text="256KB")
            canvas.itemconfig(pow_mem1, text="8")
            canvas.itemconfig(pow_mem2, text="10")
            canvas.itemconfig(pow_mem3, text="18")
            canvas.itemconfig(addr_text, text="18")
            canvas.itemconfig(pa_text, text="18")
        elif selected_memory_size == "528KB":
            canvas.itemconfig(memory_text, text="528KB")
            canvas.itemconfig(pow_mem1, text="9")
            canvas.itemconfig(pow_mem2, text="10")
            canvas.itemconfig(pow_mem3, text="19")
            canvas.itemconfig(addr_text, text="19")
            canvas.itemconfig(pa_text, text="19")
        elif selected_memory_size == "1MB":
            canvas.itemconfig(memory_text, text="1MB")
            canvas.itemconfig(pow_mem1, text="0")
            canvas.itemconfig(pow_mem2, text="20")
            canvas.itemconfig(pow_mem3, text="20")
            canvas.itemconfig(addr_text, text="20")
            canvas.itemconfig(pa_text, text="20")
        elif selected_memory_size == "2MB":
            canvas.itemconfig(memory_text, text="2MB")
            canvas.itemconfig(pow_mem1, text="1")
            canvas.itemconfig(pow_mem2, text="20")
            canvas.itemconfig(pow_mem3, text="21")
            canvas.itemconfig(addr_text, text="21")
            canvas.itemconfig(pa_text, text="21")
        elif selected_memory_size == "4MB":
            canvas.itemconfig(memory_text, text="4MB")
            canvas.itemconfig(pow_mem1, text="2")
            canvas.itemconfig(pow_mem2, text="20")
            canvas.itemconfig(pow_mem3, text="22")
            canvas.itemconfig(addr_text, text="22")
            canvas.itemconfig(pa_text, text="22")
        elif selected_memory_size == "8MB":
            canvas.itemconfig(memory_text, text="8MB")
            canvas.itemconfig(pow_mem1, text="3")
            canvas.itemconfig(pow_mem2, text="20")
            canvas.itemconfig(pow_mem3, text="23")
            canvas.itemconfig(addr_text, text="23")
            canvas.itemconfig(pa_text, text="23")
        elif selected_memory_size == "16MB":
            canvas.itemconfig(memory_text, text="16MB")
            canvas.itemconfig(pow_mem1, text="4")
            canvas.itemconfig(pow_mem2, text="20")
            canvas.itemconfig(pow_mem3, text="24")
            canvas.itemconfig(addr_text, text="24")
            canvas.itemconfig(pa_text, text="24")
        elif selected_memory_size == "32MB":
            canvas.itemconfig(memory_text, text="32MB")
            canvas.itemconfig(pow_mem1, text="5")
            canvas.itemconfig(pow_mem2, text="20")
            canvas.itemconfig(pow_mem3, text="25")
            canvas.itemconfig(addr_text, text="25")
            canvas.itemconfig(pa_text, text="25")
        
        # Update cache text
        if selected_cache_size == "64KB":
            canvas.itemconfig(cache_text, text="64KB")
            canvas.itemconfig(pow_c1, text="6")
            canvas.itemconfig(pow_c2, text="10")
            canvas.itemconfig(pow_c3, text="16")
        elif selected_cache_size == "128KB":
            canvas.itemconfig(cache_text, text="128KB")
            canvas.itemconfig(pow_c1, text="7")
            canvas.itemconfig(pow_c2, text="10")
            canvas.itemconfig(pow_c3, text="17")
        elif selected_cache_size == "256KB":
            canvas.itemconfig(cache_text, text="256KB")
            canvas.itemconfig(pow_c1, text="8")
            canvas.itemconfig(pow_c2, text="10")
            canvas.itemconfig(pow_c3, text="18")
        elif selected_cache_size == "528KB":
            canvas.itemconfig(cache_text, text="528KB")
            canvas.itemconfig(pow_c1, text="9")
            canvas.itemconfig(pow_c2, text="10")
            canvas.itemconfig(pow_c3, text="19")
        
        # Update block text
        if selected_block_size == "2B":
            canvas.itemconfig(block_text, text="2B")
            canvas.itemconfig(pow_b1, text="1")
            canvas.itemconfig(pow_b2, text="0")
            canvas.itemconfig(pow_b3, text="1")
            canvas.itemconfig(offset, text="1")
            canvas.itemconfig(bo_text, text="1")
            canvas.itemconfig(block_offset, text="1")
            canvas.itemconfig(block_offset_cache, text="1")
        elif selected_block_size == "4B":
            canvas.itemconfig(block_text, text="4B")
            canvas.itemconfig(pow_b1, text="2")
            canvas.itemconfig(pow_b2, text="0")
            canvas.itemconfig(pow_b3, text="2")
            canvas.itemconfig(offset, text="2")
            canvas.itemconfig(bo_text, text="2")
            canvas.itemconfig(block_offset, text="2")
            canvas.itemconfig(block_offset_cache, text="2")
        elif selected_block_size == "8B":
            canvas.itemconfig(block_text, text="8B")
            canvas.itemconfig(pow_b1, text="3")
            canvas.itemconfig(pow_b2, text="0")
            canvas.itemconfig(pow_b3, text="3")
            canvas.itemconfig(offset, text="3")
            canvas.itemconfig(bo_text, text="3")
            canvas.itemconfig(block_offset, text="3")
            canvas.itemconfig(block_offset_cache, text="3")
        elif selected_block_size == "16B":
            canvas.itemconfig(block_text, text="16B")
            canvas.itemconfig(pow_b1, text="4")
            canvas.itemconfig(pow_b2, text="0")
            canvas.itemconfig(pow_b3, text="4")
            canvas.itemconfig(offset, text="4")
            canvas.itemconfig(bo_text, text="4")
            canvas.itemconfig(block_offset, text="4")
            canvas.itemconfig(block_offset_cache, text="4")
        elif selected_block_size == "32B":
            canvas.itemconfig(block_text, text="32B")
            canvas.itemconfig(pow_b1, text="5")
            canvas.itemconfig(pow_b2, text="0")
            canvas.itemconfig(pow_b3, text="5")
            canvas.itemconfig(offset, text="5")
            canvas.itemconfig(bo_text, text="5")
            canvas.itemconfig(block_offset, text="5")
            canvas.itemconfig(block_offset_cache, text="5")

        #Update Cache Line text
        #64KB
        a = selected_cache_size == "64KB" and selected_block_size == "2B"
        b = selected_cache_size == "64KB" and selected_block_size == "4B"
        c = selected_cache_size == "64KB" and selected_block_size == "8B"
        d = selected_cache_size == "64KB" and selected_block_size == "16B"
        e = selected_cache_size == "64KB" and selected_block_size == "32B"
        #128KB
        f = selected_cache_size == "128KB" and selected_block_size == "2B"
        g = selected_cache_size == "128KB" and selected_block_size == "4B"
        h = selected_cache_size == "128KB" and selected_block_size == "8B"
        i = selected_cache_size == "128KB" and selected_block_size == "16B"
        j = selected_cache_size == "128KB" and selected_block_size == "32B"
        #256KB
        k = selected_cache_size == "256KB" and selected_block_size == "2B"
        l = selected_cache_size == "256KB" and selected_block_size == "4B"
        m = selected_cache_size == "256KB" and selected_block_size == "8B"
        n = selected_cache_size == "256KB" and selected_block_size == "16B"
        o = selected_cache_size == "256KB" and selected_block_size == "32B"
        #528KB
        p = selected_cache_size == "528KB" and selected_block_size == "2B"
        q = selected_cache_size == "528KB" and selected_block_size == "4B"
        r = selected_cache_size == "528KB" and selected_block_size == "8B"
        s = selected_cache_size == "528KB" and selected_block_size == "16B"
        t = selected_cache_size == "528KB" and selected_block_size == "32B"
        if a:
            canvas.itemconfig(pow_cl1, text="16")
            canvas.itemconfig(pow_cl2, text="1")
            canvas.itemconfig(pow_cl3, text="15")
            canvas.itemconfig(ln_text, text="15")
            canvas.itemconfig(ln_num, text="15")
            canvas.itemconfig(cl_size, text="15")
            canvas.itemconfig(line_number, text="15")
            canvas.itemconfig(pow_cs1, text="")
        elif b:
            canvas.itemconfig(pow_cl1, text="16")
            canvas.itemconfig(pow_cl2, text="2")
            canvas.itemconfig(pow_cl3, text="14")
            canvas.itemconfig(ln_text, text="14")
            canvas.itemconfig(ln_num, text="14")
            canvas.itemconfig(cl_size, text="14")
            canvas.itemconfig(line_number, text="14")
            canvas.itemconfig(pow_cs1, text="")
        elif c:
            canvas.itemconfig(pow_cl1, text="16")
            canvas.itemconfig(pow_cl2, text="3")
            canvas.itemconfig(pow_cl3, text="13")
            canvas.itemconfig(ln_text, text="13")
            canvas.itemconfig(ln_num, text="13")
            canvas.itemconfig(cl_size, text="13")
            canvas.itemconfig(line_number, text="13")
            canvas.itemconfig(pow_cs1, text="")
        elif d:
            canvas.itemconfig(pow_cl1, text="16")
            canvas.itemconfig(pow_cl2, text="4")
            canvas.itemconfig(pow_cl3, text="12")
            canvas.itemconfig(ln_text, text="12")
            canvas.itemconfig(ln_num, text="12")
            canvas.itemconfig(cl_size, text="12")
            canvas.itemconfig(line_number, text="12")
            canvas.itemconfig(pow_cs1, text="")
        elif e:
            canvas.itemconfig(pow_cl1, text="16")
            canvas.itemconfig(pow_cl2, text="5")
            canvas.itemconfig(pow_cl3, text="11")
            canvas.itemconfig(ln_text, text="11")
            canvas.itemconfig(ln_num, text="11")
            canvas.itemconfig(cl_size, text="11")
            canvas.itemconfig(line_number, text="11")
            canvas.itemconfig(pow_cs1, text="")
        #128KB
        elif f:
            canvas.itemconfig(pow_cl1, text="17")
            canvas.itemconfig(pow_cl2, text="1")
            canvas.itemconfig(pow_cl3, text="16")
            canvas.itemconfig(ln_text, text="16")
            canvas.itemconfig(ln_num, text="16")
            canvas.itemconfig(cl_size, text="16")
            canvas.itemconfig(line_number, text="16")
            canvas.itemconfig(pow_cs1, text="")
        elif g:
            canvas.itemconfig(pow_cl1, text="17")
            canvas.itemconfig(pow_cl2, text="2")
            canvas.itemconfig(pow_cl3, text="15")
            canvas.itemconfig(ln_text, text="15")
            canvas.itemconfig(ln_num, text="15")
            canvas.itemconfig(cl_size, text="15")
            canvas.itemconfig(line_number, text="15")
            canvas.itemconfig(pow_cs1, text="")
        elif h:
            canvas.itemconfig(pow_cl1, text="17")
            canvas.itemconfig(pow_cl2, text="3")
            canvas.itemconfig(pow_cl3, text="14")
            canvas.itemconfig(ln_text, text="14")
            canvas.itemconfig(ln_num, text="14")
            canvas.itemconfig(cl_size, text="14")
            canvas.itemconfig(line_number, text="14")
            canvas.itemconfig(pow_cs1, text="")
        elif i:
            canvas.itemconfig(pow_cl1, text="17")
            canvas.itemconfig(pow_cl2, text="4")
            canvas.itemconfig(pow_cl3, text="13")
            canvas.itemconfig(ln_text, text="13")
            canvas.itemconfig(ln_num, text="13")
            canvas.itemconfig(cl_size, text="13")
            canvas.itemconfig(line_number, text="13")
            canvas.itemconfig(pow_cs1, text="")
        elif j:
            canvas.itemconfig(pow_cl1, text="17")
            canvas.itemconfig(pow_cl2, text="5")
            canvas.itemconfig(pow_cl3, text="12")
            canvas.itemconfig(ln_text, text="12")
            canvas.itemconfig(ln_num, text="12")
            canvas.itemconfig(cl_size, text="12")
            canvas.itemconfig(line_number, text="12")
            canvas.itemconfig(pow_cs1, text="")
        #256KB
        elif k:
            canvas.itemconfig(pow_cl1, text="18")
            canvas.itemconfig(pow_cl2, text="1")
            canvas.itemconfig(pow_cl3, text="17")
            canvas.itemconfig(ln_text, text="17")
            canvas.itemconfig(ln_num, text="17")
            canvas.itemconfig(cl_size, text="17")
            canvas.itemconfig(line_number, text="17")
            canvas.itemconfig(pow_cs1, text="")
        elif l:
            canvas.itemconfig(pow_cl1, text="18")
            canvas.itemconfig(pow_cl2, text="2")
            canvas.itemconfig(pow_cl3, text="16")
            canvas.itemconfig(ln_text, text="16")
            canvas.itemconfig(ln_num, text="16")
            canvas.itemconfig(cl_size, text="16")
            canvas.itemconfig(line_number, text="16")
            canvas.itemconfig(pow_cs1, text="")
        elif m:
            canvas.itemconfig(pow_cl1, text="18")
            canvas.itemconfig(pow_cl2, text="3")
            canvas.itemconfig(pow_cl3, text="15")
            canvas.itemconfig(ln_text, text="15")
            canvas.itemconfig(ln_num, text="15")
            canvas.itemconfig(cl_size, text="15")
            canvas.itemconfig(line_number, text="15")
            canvas.itemconfig(pow_cs1, text="")
        elif n:
            canvas.itemconfig(pow_cl1, text="18")
            canvas.itemconfig(pow_cl2, text="4")
            canvas.itemconfig(pow_cl3, text="14")
            canvas.itemconfig(ln_text, text="14")
            canvas.itemconfig(ln_num, text="14")
            canvas.itemconfig(cl_size, text="14")
            canvas.itemconfig(line_number, text="14")
            canvas.itemconfig(pow_cs1, text="")
        elif o:
            canvas.itemconfig(pow_cl1, text="18")
            canvas.itemconfig(pow_cl2, text="5")
            canvas.itemconfig(pow_cl3, text="13")
            canvas.itemconfig(ln_text, text="13")
            canvas.itemconfig(ln_num, text="13")
            canvas.itemconfig(cl_size, text="13")
            canvas.itemconfig(line_number, text="13")
            canvas.itemconfig(pow_cs1, text="")
        #528KB
        elif p:
            canvas.itemconfig(pow_cl1, text="19")
            canvas.itemconfig(pow_cl2, text="1")
            canvas.itemconfig(pow_cl3, text="18")
            canvas.itemconfig(ln_text, text="18")
            canvas.itemconfig(ln_num, text="18")
            canvas.itemconfig(cl_size, text="18")
            canvas.itemconfig(line_number, text="18")
            canvas.itemconfig(pow_cs1, text="")
        elif q:
            canvas.itemconfig(pow_cl1, text="19")
            canvas.itemconfig(pow_cl2, text="2")
            canvas.itemconfig(pow_cl3, text="17")
            canvas.itemconfig(ln_text, text="17")
            canvas.itemconfig(ln_num, text="17")
            canvas.itemconfig(cl_size, text="17")
            canvas.itemconfig(line_number, text="17")
            canvas.itemconfig(pow_cs1, text="")
        elif r:
            canvas.itemconfig(pow_cl1, text="19")
            canvas.itemconfig(pow_cl2, text="3")
            canvas.itemconfig(pow_cl3, text="16")
            canvas.itemconfig(ln_text, text="16")
            canvas.itemconfig(ln_num, text="16")
            canvas.itemconfig(cl_size, text="16")
            canvas.itemconfig(line_number, text="16")
            canvas.itemconfig(pow_cs1, text="")
        elif s:
            canvas.itemconfig(pow_cl1, text="19")
            canvas.itemconfig(pow_cl2, text="4")
            canvas.itemconfig(pow_cl3, text="15")
            canvas.itemconfig(ln_text, text="15")
            canvas.itemconfig(ln_num, text="15")
            canvas.itemconfig(cl_size, text="15")
            canvas.itemconfig(line_number, text="15")
            canvas.itemconfig(pow_cs1, text="")
        elif t:
            canvas.itemconfig(pow_cl1, text="19")
            canvas.itemconfig(pow_cl2, text="5")
            canvas.itemconfig(pow_cl3, text="14")
            canvas.itemconfig(ln_text, text="14")
            canvas.itemconfig(ln_num, text="14")
            canvas.itemconfig(cl_size, text="14")
            canvas.itemconfig(line_number, text="14")
            canvas.itemconfig(pow_cs1, text="")

        #Update Tag
        #256KB
        if selected_memory_size == "256KB" and a:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "256KB" and b:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "256KB" and c:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "256KB" and d:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "256KB" and e:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "256KB" and f:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "256KB" and g:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "256KB" and h:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "256KB" and i:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "256KB" and j:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "256KB" and k:
            canvas.itemconfig(tag_text, text="0")
            canvas.itemconfig(tag_size, text="0")
            canvas.itemconfig(tag, text="0")
        elif selected_memory_size == "256KB" and l:
            canvas.itemconfig(tag_text, text="0")
            canvas.itemconfig(tag_size, text="0")
            canvas.itemconfig(tag, text="0")
        elif selected_memory_size == "256KB" and m:
            canvas.itemconfig(tag_text, text="0")
            canvas.itemconfig(tag_size, text="0")
            canvas.itemconfig(tag, text="0")
        elif selected_memory_size == "256KB" and n:
            canvas.itemconfig(tag_text, text="0")
            canvas.itemconfig(tag_size, text="0")
            canvas.itemconfig(tag, text="0")
        elif selected_memory_size == "256KB" and o:
            canvas.itemconfig(tag_text, text="0")
            canvas.itemconfig(tag_size, text="0")
            canvas.itemconfig(tag, text="0")
        elif selected_memory_size == "256KB" and p:
            canvas.itemconfig(tag_text, text="-1")
            canvas.itemconfig(tag_size, text="-1")
            canvas.itemconfig(tag, text="-1")
        elif selected_memory_size == "256KB" and q:
            canvas.itemconfig(tag_text, text="-1")
            canvas.itemconfig(tag_size, text="-1")
            canvas.itemconfig(tag, text="-1")
        elif selected_memory_size == "256KB" and r:
            canvas.itemconfig(tag_text, text="-1")
            canvas.itemconfig(tag_size, text="-1")
            canvas.itemconfig(tag, text="-1")
        elif selected_memory_size == "256KB" and s:
            canvas.itemconfig(tag_text, text="-1")
            canvas.itemconfig(tag_size, text="-1")
            canvas.itemconfig(tag, text="-1")
        elif selected_memory_size == "256KB" and t:
            canvas.itemconfig(tag_text, text="-1")
            canvas.itemconfig(tag_size, text="-1")
            canvas.itemconfig(tag, text="-1")
        #528KB
        if selected_memory_size == "528KB" and a:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "528KB" and b:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "528KB" and c:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "528KB" and d:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "528KB" and e:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "528KB" and f:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "528KB" and g:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "528KB" and h:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "528KB" and i:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "528KB" and j:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "528KB" and k:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "528KB" and l:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "528KB" and m:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "528KB" and n:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "528KB" and o:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "528KB" and p:
            canvas.itemconfig(tag_text, text="0")
            canvas.itemconfig(tag_size, text="0")
            canvas.itemconfig(tag, text="0")
        elif selected_memory_size == "528KB" and q:
            canvas.itemconfig(tag_text, text="0")
            canvas.itemconfig(tag_size, text="0")
            canvas.itemconfig(tag, text="0")
        elif selected_memory_size == "528KB" and r:
            canvas.itemconfig(tag_text, text="0")
            canvas.itemconfig(tag_size, text="0")
            canvas.itemconfig(tag, text="0")
        elif selected_memory_size == "528KB" and s:
            canvas.itemconfig(tag_text, text="0")
            canvas.itemconfig(tag_size, text="0")
            canvas.itemconfig(tag, text="0")
        elif selected_memory_size == "528KB" and t:
            canvas.itemconfig(tag_text, text="0")
            canvas.itemconfig(tag_size, text="0")
            canvas.itemconfig(tag, text="0")
        #1MB
        if selected_memory_size == "1MB" and a:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "1MB" and b:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "1MB" and c:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "1MB" and d:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "1MB" and e:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "1MB" and f:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "1MB" and g:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "1MB" and h:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "1MB" and i:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "1MB" and j:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "1MB" and k:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "1MB" and l:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "1MB" and m:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "1MB" and n:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "1MB" and o:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "1MB" and p:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "1MB" and q:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "1MB" and r:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "1MB" and s:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "1MB" and t:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        #2MB
        if selected_memory_size == "2MB" and a:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "2MB" and b:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "2MB" and c:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "2MB" and d:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "2MB" and e:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "2MB" and f:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "2MB" and g:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "2MB" and h:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "2MB" and i:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "2MB" and j:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "2MB" and k:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "2MB" and l:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "2MB" and m:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "2MB" and n:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "2MB" and o:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "2MB" and p:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "2MB" and q:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "2MB" and r:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "2MB" and s:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "2MB" and t:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        #4MB
        if selected_memory_size == "4MB" and a:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "4MB" and b:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "4MB" and c:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "4MB" and d:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "4MB" and e:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "4MB" and f:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "4MB" and g:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "4MB" and h:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "4MB" and i:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "4MB" and j:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "4MB" and k:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "4MB" and l:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "4MB" and m:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "4MB" and n:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "4MB" and o:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "4MB" and p:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "4MB" and q:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "4MB" and r:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "4MB" and s:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "4MB" and t:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        #8MB
        if selected_memory_size == "8MB" and a:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "8MB" and b:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "8MB" and c:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "8MB" and d:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "8MB" and e:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "8MB" and f:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "8MB" and g:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "8MB" and h:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "8MB" and i:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "8MB" and j:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "8MB" and k:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "8MB" and l:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "8MB" and m:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "8MB" and n:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "8MB" and o:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "8MB" and p:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "8MB" and q:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "8MB" and r:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "8MB" and s:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "8MB" and t:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        #16MB
        if selected_memory_size == "16MB" and a:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "16MB" and b:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "16MB" and c:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "16MB" and d:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "16MB" and e:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "16MB" and f:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "16MB" and g:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "16MB" and h:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "16MB" and i:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "16MB" and j:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "16MB" and k:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "16MB" and l:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "16MB" and m:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "16MB" and n:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "16MB" and o:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "16MB" and p:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "16MB" and q:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "16MB" and r:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "16MB" and s:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "16MB" and t:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        #32MB
        if selected_memory_size == "32MB" and a:
            canvas.itemconfig(tag_text, text="9")
            canvas.itemconfig(tag_size, text="9")
            canvas.itemconfig(tag, text="9")
        elif selected_memory_size == "32MB" and b:
            canvas.itemconfig(tag_text, text="9")
            canvas.itemconfig(tag_size, text="9")
            canvas.itemconfig(tag, text="9")
        elif selected_memory_size == "32MB" and c:
            canvas.itemconfig(tag_text, text="9")
            canvas.itemconfig(tag_size, text="9")
            canvas.itemconfig(tag, text="9")
        elif selected_memory_size == "32MB" and d:
            canvas.itemconfig(tag_text, text="9")
            canvas.itemconfig(tag_size, text="9")
            canvas.itemconfig(tag, text="9")
        elif selected_memory_size == "32MB" and e:
            canvas.itemconfig(tag_text, text="9")
            canvas.itemconfig(tag_size, text="9")
            canvas.itemconfig(tag, text="9")
        elif selected_memory_size == "32MB" and f:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "32MB" and g:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "32MB" and h:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "32MB" and i:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "32MB" and j:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "32MB" and k:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "32MB" and l:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "32MB" and m:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "32MB" and n:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "32MB" and o:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "32MB" and p:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "32MB" and q:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "32MB" and r:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "32MB" and s:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "32MB" and t:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")

        #Update Block Location
        aa = selected_memory_size == "256KB" and selected_block_size == "2B"
        bb = selected_memory_size == "256KB" and selected_block_size == "4B"
        cc = selected_memory_size == "256KB" and selected_block_size == "8B"
        dd = selected_memory_size == "256KB" and selected_block_size == "16B"
        ee = selected_memory_size == "256KB" and selected_block_size == "32B"
        ff = selected_memory_size == "528KB" and selected_block_size == "2B"
        gg = selected_memory_size == "528KB" and selected_block_size == "4B"
        hh = selected_memory_size == "528KB" and selected_block_size == "8B"
        ii = selected_memory_size == "528KB" and selected_block_size == "16B"
        jj = selected_memory_size == "528KB" and selected_block_size == "32B"
        kk = selected_memory_size == "1MB" and selected_block_size == "2B"
        ll = selected_memory_size == "1MB" and selected_block_size == "4B"
        mm = selected_memory_size == "1MB" and selected_block_size == "8B"
        nn = selected_memory_size == "1MB" and selected_block_size == "16B"
        oo = selected_memory_size == "1MB" and selected_block_size == "32B"
        pp = selected_memory_size == "2MB" and selected_block_size == "2B"
        qq = selected_memory_size == "2MB" and selected_block_size == "4B"
        rr = selected_memory_size == "2MB" and selected_block_size == "8B"
        ss = selected_memory_size == "2MB" and selected_block_size == "16B"
        tt = selected_memory_size == "2MB" and selected_block_size == "32B"
        uu = selected_memory_size == "4MB" and selected_block_size == "2B"
        vv = selected_memory_size == "4MB" and selected_block_size == "4B"
        ww = selected_memory_size == "4MB" and selected_block_size == "8B"
        xx = selected_memory_size == "4MB" and selected_block_size == "16B"
        yy = selected_memory_size == "4MB" and selected_block_size == "32B"
        zz = selected_memory_size == "8MB" and selected_block_size == "2B"
        aaa = selected_memory_size == "8MB" and selected_block_size == "4B"
        bbb = selected_memory_size == "8MB" and selected_block_size == "8B"
        ccc = selected_memory_size == "8MB" and selected_block_size == "16B"
        ddd = selected_memory_size == "8MB" and selected_block_size == "32B"
        eee = selected_memory_size == "16MB" and selected_block_size == "2B"
        fff = selected_memory_size == "16MB" and selected_block_size == "4B"
        ggg = selected_memory_size == "16MB" and selected_block_size == "8B"
        hhh = selected_memory_size == "16MB" and selected_block_size == "16B"
        iii = selected_memory_size == "16MB" and selected_block_size == "32B"
        jjj = selected_memory_size == "32MB" and selected_block_size == "2B"
        kkk = selected_memory_size == "32MB" and selected_block_size == "4B"
        lll = selected_memory_size == "32MB" and selected_block_size == "8B"
        mmm = selected_memory_size == "32MB" and selected_block_size == "16B"
        nnn = selected_memory_size == "32MB" and selected_block_size == "32B"
        #256KB
        if aa:
            canvas.itemconfig(block_location, text="17")
        elif bb:
            canvas.itemconfig(block_location, text="16")
        elif cc:
            canvas.itemconfig(block_location, text="15")
        elif dd:
            canvas.itemconfig(block_location, text="14")
        elif ee:
            canvas.itemconfig(block_location, text="13")
        elif ff:
            canvas.itemconfig(block_location, text="18")
        elif gg:
            canvas.itemconfig(block_location, text="17")
        elif hh:
            canvas.itemconfig(block_location, text="16")
        elif ii:
            canvas.itemconfig(block_location, text="15")
        elif jj:
            canvas.itemconfig(block_location, text="14")
        elif kk:
            canvas.itemconfig(block_location, text="19")
        elif ll:
            canvas.itemconfig(block_location, text="18")
        elif mm:
            canvas.itemconfig(block_location, text="17")
        elif nn:
            canvas.itemconfig(block_location, text="16")
        elif oo:
            canvas.itemconfig(block_location, text="15")
        elif pp:
            canvas.itemconfig(block_location, text="20")
        elif qq:
            canvas.itemconfig(block_location, text="19")
        elif rr:
            canvas.itemconfig(block_location, text="18")
        elif ss:
            canvas.itemconfig(block_location, text="17")
        elif tt:
            canvas.itemconfig(block_location, text="16")
        elif uu:
            canvas.itemconfig(block_location, text="21")
        elif vv:
            canvas.itemconfig(block_location, text="20")
        elif ww:
            canvas.itemconfig(block_location, text="19")
        elif xx:
            canvas.itemconfig(block_location, text="18")
        elif yy:
            canvas.itemconfig(block_location, text="17")
        elif zz:
            canvas.itemconfig(block_location, text="22")
        elif aaa:
            canvas.itemconfig(block_location, text="21")
        elif bbb:
            canvas.itemconfig(block_location, text="20")
        elif ccc:
            canvas.itemconfig(block_location, text="19")
        elif ddd:
            canvas.itemconfig(block_location, text="18")
        elif eee:
            canvas.itemconfig(block_location, text="23")
        elif fff:
            canvas.itemconfig(block_location, text="22")
        elif ggg:
            canvas.itemconfig(block_location, text="21")
        elif hhh:
            canvas.itemconfig(block_location, text="20")
        elif iii:
            canvas.itemconfig(block_location, text="19")
        elif jjj:
            canvas.itemconfig(block_location, text="24")
        elif kkk:
            canvas.itemconfig(block_location, text="23")
        elif lll:
            canvas.itemconfig(block_location, text="22")
        elif mmm:
            canvas.itemconfig(block_location, text="21")
        elif nnn:
            canvas.itemconfig(block_location, text="20")

        #Update Cache Set and Set Number
        ss2 = selected_set_size == "2"
        ss4 = selected_set_size == "4"
        ss8 = selected_set_size == "8"

        #2blocks
        if a and ss2:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif b and ss2:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif c and ss2:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif d and ss2:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif e and ss2:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif f and ss2:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif g and ss2:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif h and ss2:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif i and ss2:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif j and ss2:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif k and ss2:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif l and ss2:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif m and ss2:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif n and ss2:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif o and ss2:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif p and ss2:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif q and ss2:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif r and ss2:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif s and ss2:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif t and ss2:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")

        #4blocks
        if a and ss4:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif b and ss4:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif c and ss4:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif d and ss4:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif e and ss4:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif f and ss4:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif g and ss4:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif h and ss4:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif i and ss4:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif j and ss4:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif k and ss4:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif l and ss4:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif m and ss4:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif n and ss4:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif o and ss4:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif p and ss4:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif q and ss4:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif r and ss4:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif s and ss4:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif t and ss4:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")

        #8blocks
        if a and ss8:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif b and ss8:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif c and ss8:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif d and ss8:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif e and ss8:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif f and ss8:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif g and ss8:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif h and ss8:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif i and ss8:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif j and ss8:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif k and ss8:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif l and ss8:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif m and ss8:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif n and ss8:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif o and ss8:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif p and ss8:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif q and ss8:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif r and ss8:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif s and ss8:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        elif t and ss8:
            canvas.itemconfig(pow_cs2, text="")
            canvas.itemconfig(pow_cs3, text="")
            canvas.itemconfig(sn_text, text="")
        
    # ----------- SET ASSOCIATIVE -----------
            
    elif selected_radio == "Option 2":
        
        #Memory Size
        canvas.itemconfig(mem, text="Memory Size (MS)")
        canvas.itemconfig(equal_mem1, text="=")
        canvas.itemconfig(equal_mem2, text="=")
        canvas.itemconfig(two_mem1, text="2")
        canvas.itemconfig(mul_mem, text="x")
        canvas.itemconfig(two_mem2, text="2")
        canvas.itemconfig(equal_mem3, text="=")
        canvas.itemconfig(two_mem3, text="2")
        canvas.itemconfig(line_mem, text=".............")

        #Physical Address
        canvas.itemconfig(pa, text="Physical Address (PA)")
        canvas.itemconfig(equal_pa, text="=")
        canvas.itemconfig(bits_pa, text="bits")

        #Cache Size
        canvas.itemconfig(cache, text="Cache Size (CS)")
        canvas.itemconfig(equal_c1, text="=")
        canvas.itemconfig(equal_c2, text="=")
        canvas.itemconfig(two_c1, text="2")
        canvas.itemconfig(mul_c, text="x")
        canvas.itemconfig(two_c2, text="2")
        canvas.itemconfig(equal_c3, text="=")
        canvas.itemconfig(two_c3, text="2")

        #Block Size
        canvas.itemconfig(block, text="Block Size (BS)")
        canvas.itemconfig(equal_b1, text="=")
        canvas.itemconfig(equal_b2, text="=")
        canvas.itemconfig(two_b1, text="2")
        canvas.itemconfig(mul_b, text="x")
        canvas.itemconfig(two_b2, text="2")
        canvas.itemconfig(equal_b3, text="=")
        canvas.itemconfig(two_b3, text="2")
        canvas.itemconfig(line_block, text=".............")
        
        #Block Offset
        canvas.itemconfig(bo, text="Block Offset (BO)")
        canvas.itemconfig(equal_bo, text="=")
        canvas.itemconfig(bits_bo, text="bits")

        #Cache Line
        canvas.itemconfig(cache_line, text="Cache Line (CL)")
        canvas.itemconfig(equal_cl1, text="=")
        canvas.itemconfig(for_cl, text="CS/BS")
        canvas.itemconfig(equal_cl2, text="=")
        canvas.itemconfig(two_cl1, text="2")
        canvas.itemconfig(div, text="_____")
        canvas.itemconfig(two_cl2, text="2")
        canvas.itemconfig(equal_cl3, text="=")
        canvas.itemconfig(two_cl3, text="2")
        canvas.itemconfig(line_linenum, text="")

        #Line Number
        canvas.itemconfig(ln, text="")
        canvas.itemconfig(equal_ln, text="")
        canvas.itemconfig(bits_ln, text="")

        #Tag
        canvas.itemconfig(tagging, text="Tag")
        canvas.itemconfig(equal_tag1, text="=")
        canvas.itemconfig(for_tag, text="PA - ( BO + SN )")
        canvas.itemconfig(equal_tag2, text="=")
        canvas.itemconfig(minus, text="-")
        canvas.itemconfig(left, text="(")
        canvas.itemconfig(plus, text="+")
        canvas.itemconfig(right, text=")")
        canvas.itemconfig(equal_tag3, text="=")
        canvas.itemconfig(bits_tag, text="bits")

        #Tag Directory Size
        canvas.itemconfig(tag_size_title, text="Tag Directory Size")
        canvas.itemconfig(equal_tds1, text="=")
        canvas.itemconfig(for_tds, text="Tag x CL")
        canvas.itemconfig(equal_tds2, text="=")
        canvas.itemconfig(mul_tds, text="x")
        canvas.itemconfig(two_tds, text="2")
        canvas.itemconfig(bits_tds, text="bits")

        #Cache Set
        canvas.itemconfig(cache_set, text="Cache Set (CSS)")
        canvas.itemconfig(equal_cs1, text="=")
        canvas.itemconfig(for_cs, text="CL/Set Size")
        canvas.itemconfig(equal_cs2, text="=")
        canvas.itemconfig(two_cs1, text="2")
        canvas.itemconfig(div_css, text="_____")
        canvas.itemconfig(two_cs2, text="2")
        canvas.itemconfig(equal_cs3, text="=")
        canvas.itemconfig(two_cs3, text="2")
        canvas.itemconfig(line_setnum, text=".........................")

        #Set Number
        canvas.itemconfig(setnum, text="Set Number (SN)")
        canvas.itemconfig(equal_sn, text="=")
        canvas.itemconfig(bits_sn, text="bits")

        ####################################################

        #MAIN MEMORY VIEW

        canvas.itemconfig(bits_block_location, text="bits")
        canvas.itemconfig(bits_block_offset, text="bits")

        #CACHE VIEW

        canvas.itemconfig(bits_tagging, text="bits")
        canvas.itemconfig(bits_line_number, text="bits")
        canvas.itemconfig(bits_block_offset_cache, text="bits")
        canvas.itemconfig(dm_view, text="")
        canvas.itemconfig(sa_view, text="Set")

        ####################################################

        #update memory text
        if selected_memory_size == "256KB":
            canvas.itemconfig(memory_text, text="256KB")
            canvas.itemconfig(pow_mem1, text="8")
            canvas.itemconfig(pow_mem2, text="10")
            canvas.itemconfig(pow_mem3, text="18")
            canvas.itemconfig(addr_text, text="18")
            canvas.itemconfig(pa_text, text="18")
        elif selected_memory_size == "528KB":
            canvas.itemconfig(memory_text, text="528KB")
            canvas.itemconfig(pow_mem1, text="9")
            canvas.itemconfig(pow_mem2, text="10")
            canvas.itemconfig(pow_mem3, text="19")
            canvas.itemconfig(addr_text, text="19")
            canvas.itemconfig(pa_text, text="19")
        elif selected_memory_size == "1MB":
            canvas.itemconfig(memory_text, text="1MB")
            canvas.itemconfig(pow_mem1, text="0")
            canvas.itemconfig(pow_mem2, text="20")
            canvas.itemconfig(pow_mem3, text="20")
            canvas.itemconfig(addr_text, text="20")
            canvas.itemconfig(pa_text, text="20")
        elif selected_memory_size == "2MB":
            canvas.itemconfig(memory_text, text="2MB")
            canvas.itemconfig(pow_mem1, text="1")
            canvas.itemconfig(pow_mem2, text="20")
            canvas.itemconfig(pow_mem3, text="21")
            canvas.itemconfig(addr_text, text="21")
            canvas.itemconfig(pa_text, text="21")
        elif selected_memory_size == "4MB":
            canvas.itemconfig(memory_text, text="4MB")
            canvas.itemconfig(pow_mem1, text="2")
            canvas.itemconfig(pow_mem2, text="20")
            canvas.itemconfig(pow_mem3, text="22")
            canvas.itemconfig(addr_text, text="22")
            canvas.itemconfig(pa_text, text="22")
        elif selected_memory_size == "8MB":
            canvas.itemconfig(memory_text, text="8MB")
            canvas.itemconfig(pow_mem1, text="3")
            canvas.itemconfig(pow_mem2, text="20")
            canvas.itemconfig(pow_mem3, text="23")
            canvas.itemconfig(addr_text, text="23")
            canvas.itemconfig(pa_text, text="23")
        elif selected_memory_size == "16MB":
            canvas.itemconfig(memory_text, text="16MB")
            canvas.itemconfig(pow_mem1, text="4")
            canvas.itemconfig(pow_mem2, text="20")
            canvas.itemconfig(pow_mem3, text="24")
            canvas.itemconfig(addr_text, text="24")
            canvas.itemconfig(pa_text, text="24")
        elif selected_memory_size == "32MB":
            canvas.itemconfig(memory_text, text="32MB")
            canvas.itemconfig(pow_mem1, text="5")
            canvas.itemconfig(pow_mem2, text="20")
            canvas.itemconfig(pow_mem3, text="25")
            canvas.itemconfig(addr_text, text="25")
            canvas.itemconfig(pa_text, text="25")
        
        # Update cache text
        if selected_cache_size == "64KB":
            canvas.itemconfig(cache_text, text="64KB")
            canvas.itemconfig(pow_c1, text="6")
            canvas.itemconfig(pow_c2, text="10")
            canvas.itemconfig(pow_c3, text="16")
        elif selected_cache_size == "128KB":
            canvas.itemconfig(cache_text, text="128KB")
            canvas.itemconfig(pow_c1, text="7")
            canvas.itemconfig(pow_c2, text="10")
            canvas.itemconfig(pow_c3, text="17")
        elif selected_cache_size == "256KB":
            canvas.itemconfig(cache_text, text="256KB")
            canvas.itemconfig(pow_c1, text="8")
            canvas.itemconfig(pow_c2, text="10")
            canvas.itemconfig(pow_c3, text="18")
        elif selected_cache_size == "528KB":
            canvas.itemconfig(cache_text, text="528KB")
            canvas.itemconfig(pow_c1, text="9")
            canvas.itemconfig(pow_c2, text="10")
            canvas.itemconfig(pow_c3, text="19")
        
        # Update block text
        if selected_block_size == "2B":
            canvas.itemconfig(block_text, text="2B")
            canvas.itemconfig(pow_b1, text="1")
            canvas.itemconfig(pow_b2, text="0")
            canvas.itemconfig(pow_b3, text="1")
            canvas.itemconfig(offset, text="1")
            canvas.itemconfig(bo_text, text="1")
            canvas.itemconfig(block_offset, text="1")
            canvas.itemconfig(block_offset_cache, text="1")
        elif selected_block_size == "4B":
            canvas.itemconfig(block_text, text="4B")
            canvas.itemconfig(pow_b1, text="2")
            canvas.itemconfig(pow_b2, text="0")
            canvas.itemconfig(pow_b3, text="2")
            canvas.itemconfig(offset, text="2")
            canvas.itemconfig(bo_text, text="2")
            canvas.itemconfig(block_offset, text="2")
            canvas.itemconfig(block_offset_cache, text="2")
        elif selected_block_size == "8B":
            canvas.itemconfig(block_text, text="8B")
            canvas.itemconfig(pow_b1, text="3")
            canvas.itemconfig(pow_b2, text="0")
            canvas.itemconfig(pow_b3, text="3")
            canvas.itemconfig(offset, text="3")
            canvas.itemconfig(bo_text, text="3")
            canvas.itemconfig(block_offset, text="3")
            canvas.itemconfig(block_offset_cache, text="3")
        elif selected_block_size == "16B":
            canvas.itemconfig(block_text, text="16B")
            canvas.itemconfig(pow_b1, text="4")
            canvas.itemconfig(pow_b2, text="0")
            canvas.itemconfig(pow_b3, text="4")
            canvas.itemconfig(offset, text="4")
            canvas.itemconfig(bo_text, text="4")
            canvas.itemconfig(block_offset, text="4")
            canvas.itemconfig(block_offset_cache, text="4")
        elif selected_block_size == "32B":
            canvas.itemconfig(block_text, text="32B")
            canvas.itemconfig(pow_b1, text="5")
            canvas.itemconfig(pow_b2, text="0")
            canvas.itemconfig(pow_b3, text="5")
            canvas.itemconfig(offset, text="5")
            canvas.itemconfig(bo_text, text="5")
            canvas.itemconfig(block_offset, text="5")
            canvas.itemconfig(block_offset_cache, text="5")

        #Update Cache Line text
        #64KB
        a = selected_cache_size == "64KB" and selected_block_size == "2B"
        b = selected_cache_size == "64KB" and selected_block_size == "4B"
        c = selected_cache_size == "64KB" and selected_block_size == "8B"
        d = selected_cache_size == "64KB" and selected_block_size == "16B"
        e = selected_cache_size == "64KB" and selected_block_size == "32B"
        #128KB
        f = selected_cache_size == "128KB" and selected_block_size == "2B"
        g = selected_cache_size == "128KB" and selected_block_size == "4B"
        h = selected_cache_size == "128KB" and selected_block_size == "8B"
        i = selected_cache_size == "128KB" and selected_block_size == "16B"
        j = selected_cache_size == "128KB" and selected_block_size == "32B"
        #256KB
        k = selected_cache_size == "256KB" and selected_block_size == "2B"
        l = selected_cache_size == "256KB" and selected_block_size == "4B"
        m = selected_cache_size == "256KB" and selected_block_size == "8B"
        n = selected_cache_size == "256KB" and selected_block_size == "16B"
        o = selected_cache_size == "256KB" and selected_block_size == "32B"
        #528KB
        p = selected_cache_size == "528KB" and selected_block_size == "2B"
        q = selected_cache_size == "528KB" and selected_block_size == "4B"
        r = selected_cache_size == "528KB" and selected_block_size == "8B"
        s = selected_cache_size == "528KB" and selected_block_size == "16B"
        t = selected_cache_size == "528KB" and selected_block_size == "32B"
        if a:
            canvas.itemconfig(pow_cl1, text="16")
            canvas.itemconfig(pow_cl2, text="1")
            canvas.itemconfig(pow_cl3, text="15")
            canvas.itemconfig(ln_text, text="") 
            canvas.itemconfig(ln_num, text="15")
            canvas.itemconfig(cl_size, text="15")
            canvas.itemconfig(line_number, text="") #cache view
            canvas.itemconfig(pow_cs1, text="15")
        elif b:
            canvas.itemconfig(pow_cl1, text="16")
            canvas.itemconfig(pow_cl2, text="2")
            canvas.itemconfig(pow_cl3, text="14")
            canvas.itemconfig(ln_text, text="")
            canvas.itemconfig(ln_num, text="14")
            canvas.itemconfig(cl_size, text="14")
            canvas.itemconfig(line_number, text="")
            canvas.itemconfig(pow_cs1, text="14")
        elif c:
            canvas.itemconfig(pow_cl1, text="16")
            canvas.itemconfig(pow_cl2, text="3")
            canvas.itemconfig(pow_cl3, text="13")
            canvas.itemconfig(ln_text, text="")
            canvas.itemconfig(ln_num, text="13")
            canvas.itemconfig(cl_size, text="13")
            canvas.itemconfig(line_number, text="")
            canvas.itemconfig(pow_cs1, text="13")
        elif d:
            canvas.itemconfig(pow_cl1, text="16")
            canvas.itemconfig(pow_cl2, text="4")
            canvas.itemconfig(pow_cl3, text="12")
            canvas.itemconfig(ln_text, text="")
            canvas.itemconfig(ln_num, text="12")
            canvas.itemconfig(cl_size, text="12")
            canvas.itemconfig(line_number, text="")
            canvas.itemconfig(pow_cs1, text="12")
        elif e:
            canvas.itemconfig(pow_cl1, text="16")
            canvas.itemconfig(pow_cl2, text="5")
            canvas.itemconfig(pow_cl3, text="11")
            canvas.itemconfig(ln_text, text="")
            canvas.itemconfig(ln_num, text="11")
            canvas.itemconfig(cl_size, text="11")
            canvas.itemconfig(line_number, text="")
            canvas.itemconfig(pow_cs1, text="11")
        #128KB
        elif f:
            canvas.itemconfig(pow_cl1, text="17")
            canvas.itemconfig(pow_cl2, text="1")
            canvas.itemconfig(pow_cl3, text="16")
            canvas.itemconfig(ln_text, text="")
            canvas.itemconfig(ln_num, text="16")
            canvas.itemconfig(cl_size, text="16")
            canvas.itemconfig(line_number, text="")
            canvas.itemconfig(pow_cs1, text="16")
        elif g:
            canvas.itemconfig(pow_cl1, text="17")
            canvas.itemconfig(pow_cl2, text="2")
            canvas.itemconfig(pow_cl3, text="15")
            canvas.itemconfig(ln_text, text="")
            canvas.itemconfig(ln_num, text="15")
            canvas.itemconfig(cl_size, text="15")
            canvas.itemconfig(line_number, text="")
            canvas.itemconfig(pow_cs1, text="15")
        elif h:
            canvas.itemconfig(pow_cl1, text="17")
            canvas.itemconfig(pow_cl2, text="3")
            canvas.itemconfig(pow_cl3, text="14")
            canvas.itemconfig(ln_text, text="")
            canvas.itemconfig(ln_num, text="14")
            canvas.itemconfig(cl_size, text="14")
            canvas.itemconfig(line_number, text="")
            canvas.itemconfig(pow_cs1, text="14")
        elif i:
            canvas.itemconfig(pow_cl1, text="17")
            canvas.itemconfig(pow_cl2, text="4")
            canvas.itemconfig(pow_cl3, text="13")
            canvas.itemconfig(ln_text, text="")
            canvas.itemconfig(ln_num, text="13")
            canvas.itemconfig(cl_size, text="13")
            canvas.itemconfig(line_number, text="")
            canvas.itemconfig(pow_cs1, text="13")
        elif j:
            canvas.itemconfig(pow_cl1, text="17")
            canvas.itemconfig(pow_cl2, text="5")
            canvas.itemconfig(pow_cl3, text="12")
            canvas.itemconfig(ln_text, text="")
            canvas.itemconfig(ln_num, text="12")
            canvas.itemconfig(cl_size, text="12")
            canvas.itemconfig(line_number, text="")
            canvas.itemconfig(pow_cs1, text="12")
        #256KB
        elif k:
            canvas.itemconfig(pow_cl1, text="18")
            canvas.itemconfig(pow_cl2, text="1")
            canvas.itemconfig(pow_cl3, text="17")
            canvas.itemconfig(ln_text, text="")
            canvas.itemconfig(ln_num, text="17")
            canvas.itemconfig(cl_size, text="17")
            canvas.itemconfig(line_number, text="")
            canvas.itemconfig(pow_cs1, text="17")
        elif l:
            canvas.itemconfig(pow_cl1, text="18")
            canvas.itemconfig(pow_cl2, text="2")
            canvas.itemconfig(pow_cl3, text="16")
            canvas.itemconfig(ln_text, text="")
            canvas.itemconfig(ln_num, text="16")
            canvas.itemconfig(cl_size, text="16")
            canvas.itemconfig(line_number, text="")
            canvas.itemconfig(pow_cs1, text="16")
        elif m:
            canvas.itemconfig(pow_cl1, text="18")
            canvas.itemconfig(pow_cl2, text="3")
            canvas.itemconfig(pow_cl3, text="15")
            canvas.itemconfig(ln_text, text="")
            canvas.itemconfig(ln_num, text="15")
            canvas.itemconfig(cl_size, text="15")
            canvas.itemconfig(line_number, text="")
            canvas.itemconfig(pow_cs1, text="15")
        elif n:
            canvas.itemconfig(pow_cl1, text="18")
            canvas.itemconfig(pow_cl2, text="4")
            canvas.itemconfig(pow_cl3, text="14")
            canvas.itemconfig(ln_text, text="")
            canvas.itemconfig(ln_num, text="14")
            canvas.itemconfig(cl_size, text="14")
            canvas.itemconfig(line_number, text="")
            canvas.itemconfig(pow_cs1, text="14")
        elif o:
            canvas.itemconfig(pow_cl1, text="18")
            canvas.itemconfig(pow_cl2, text="5")
            canvas.itemconfig(pow_cl3, text="13")
            canvas.itemconfig(ln_text, text="")
            canvas.itemconfig(ln_num, text="13")
            canvas.itemconfig(cl_size, text="13")
            canvas.itemconfig(line_number, text="")
            canvas.itemconfig(pow_cs1, text="13")
        #528KB
        elif p:
            canvas.itemconfig(pow_cl1, text="19")
            canvas.itemconfig(pow_cl2, text="1")
            canvas.itemconfig(pow_cl3, text="18")
            canvas.itemconfig(ln_text, text="")
            canvas.itemconfig(ln_num, text="18")
            canvas.itemconfig(cl_size, text="18")
            canvas.itemconfig(line_number, text="")
            canvas.itemconfig(pow_cs1, text="18")
        elif q:
            canvas.itemconfig(pow_cl1, text="19")
            canvas.itemconfig(pow_cl2, text="2")
            canvas.itemconfig(pow_cl3, text="17")
            canvas.itemconfig(ln_text, text="")
            canvas.itemconfig(ln_num, text="17")
            canvas.itemconfig(cl_size, text="17")
            canvas.itemconfig(line_number, text="")
            canvas.itemconfig(pow_cs1, text="17")
        elif r:
            canvas.itemconfig(pow_cl1, text="19")
            canvas.itemconfig(pow_cl2, text="3")
            canvas.itemconfig(pow_cl3, text="16")
            canvas.itemconfig(ln_text, text="")
            canvas.itemconfig(ln_num, text="16")
            canvas.itemconfig(cl_size, text="16")
            canvas.itemconfig(line_number, text="")
            canvas.itemconfig(pow_cs1, text="16")
        elif s:
            canvas.itemconfig(pow_cl1, text="19")
            canvas.itemconfig(pow_cl2, text="4")
            canvas.itemconfig(pow_cl3, text="15")
            canvas.itemconfig(ln_text, text="")
            canvas.itemconfig(ln_num, text="15")
            canvas.itemconfig(cl_size, text="15")
            canvas.itemconfig(line_number, text="")
            canvas.itemconfig(pow_cs1, text="15")
        elif t:
            canvas.itemconfig(pow_cl1, text="19")
            canvas.itemconfig(pow_cl2, text="5")
            canvas.itemconfig(pow_cl3, text="14")
            canvas.itemconfig(ln_text, text="")
            canvas.itemconfig(ln_num, text="14")
            canvas.itemconfig(cl_size, text="14")
            canvas.itemconfig(line_number, text="")
            canvas.itemconfig(pow_cs1, text="14")

        #Update Tag
        #256KB
        if selected_memory_size == "256KB" and a:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "256KB" and b:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "256KB" and c:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "256KB" and d:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "256KB" and e:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "256KB" and f:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "256KB" and g:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "256KB" and h:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "256KB" and i:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "256KB" and j:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "256KB" and k:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "256KB" and l:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "256KB" and m:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "256KB" and n:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "256KB" and o:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "256KB" and p:
            canvas.itemconfig(tag_text, text="0")
            canvas.itemconfig(tag_size, text="0")
            canvas.itemconfig(tag, text="0")
        elif selected_memory_size == "256KB" and q:
            canvas.itemconfig(tag_text, text="0")
            canvas.itemconfig(tag_size, text="0")
            canvas.itemconfig(tag, text="0")
        elif selected_memory_size == "256KB" and r:
            canvas.itemconfig(tag_text, text="0")
            canvas.itemconfig(tag_size, text="0")
            canvas.itemconfig(tag, text="0")
        elif selected_memory_size == "256KB" and s:
            canvas.itemconfig(tag_text, text="0")
            canvas.itemconfig(tag_size, text="0")
            canvas.itemconfig(tag, text="0")
        elif selected_memory_size == "256KB" and t:
            canvas.itemconfig(tag_text, text="0")
            canvas.itemconfig(tag_size, text="0")
            canvas.itemconfig(tag, text="0")
        #528KB
        if selected_memory_size == "528KB" and a:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "528KB" and b:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "528KB" and c:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "528KB" and d:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "528KB" and e:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "528KB" and f:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "528KB" and g:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "528KB" and h:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "528KB" and i:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "528KB" and j:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "528KB" and k:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "528KB" and l:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "528KB" and m:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "528KB" and n:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "528KB" and o:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "528KB" and p:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "528KB" and q:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "528KB" and r:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "528KB" and s:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        elif selected_memory_size == "528KB" and t:
            canvas.itemconfig(tag_text, text="1")
            canvas.itemconfig(tag_size, text="1")
            canvas.itemconfig(tag, text="1")
        #1MB
        if selected_memory_size == "1MB" and a:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "1MB" and b:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "1MB" and c:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "1MB" and d:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "1MB" and e:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "1MB" and f:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "1MB" and g:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "1MB" and h:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "1MB" and i:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "1MB" and j:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "1MB" and k:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "1MB" and l:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "1MB" and m:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "1MB" and n:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "1MB" and o:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "1MB" and p:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "1MB" and q:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "1MB" and r:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "1MB" and s:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        elif selected_memory_size == "1MB" and t:
            canvas.itemconfig(tag_text, text="2")
            canvas.itemconfig(tag_size, text="2")
            canvas.itemconfig(tag, text="2")
        #2MB
        if selected_memory_size == "2MB" and a:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "2MB" and b:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "2MB" and c:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "2MB" and d:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "2MB" and e:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "2MB" and f:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "2MB" and g:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "2MB" and h:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "2MB" and i:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "2MB" and j:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "2MB" and k:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "2MB" and l:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "2MB" and m:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "2MB" and n:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "2MB" and o:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "2MB" and p:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "2MB" and q:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "2MB" and r:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "2MB" and s:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        elif selected_memory_size == "2MB" and t:
            canvas.itemconfig(tag_text, text="3")
            canvas.itemconfig(tag_size, text="3")
            canvas.itemconfig(tag, text="3")
        #4MB
        if selected_memory_size == "4MB" and a:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "4MB" and b:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "4MB" and c:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "4MB" and d:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "4MB" and e:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "4MB" and f:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "4MB" and g:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "4MB" and h:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "4MB" and i:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "4MB" and j:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "4MB" and k:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "4MB" and l:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "4MB" and m:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "4MB" and n:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "4MB" and o:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "4MB" and p:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "4MB" and q:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "4MB" and r:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "4MB" and s:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        elif selected_memory_size == "4MB" and t:
            canvas.itemconfig(tag_text, text="4")
            canvas.itemconfig(tag_size, text="4")
            canvas.itemconfig(tag, text="4")
        #8MB
        if selected_memory_size == "8MB" and a:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "8MB" and b:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "8MB" and c:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "8MB" and d:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "8MB" and e:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "8MB" and f:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "8MB" and g:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "8MB" and h:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "8MB" and i:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "8MB" and j:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "8MB" and k:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "8MB" and l:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "8MB" and m:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "8MB" and n:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "8MB" and o:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "8MB" and p:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "8MB" and q:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "8MB" and r:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "8MB" and s:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        elif selected_memory_size == "8MB" and t:
            canvas.itemconfig(tag_text, text="5")
            canvas.itemconfig(tag_size, text="5")
            canvas.itemconfig(tag, text="5")
        #16MB
        if selected_memory_size == "16MB" and a:
            canvas.itemconfig(tag_text, text="9")
            canvas.itemconfig(tag_size, text="9")
            canvas.itemconfig(tag, text="9")
        elif selected_memory_size == "16MB" and b:
            canvas.itemconfig(tag_text, text="9")
            canvas.itemconfig(tag_size, text="9")
            canvas.itemconfig(tag, text="9")
        elif selected_memory_size == "16MB" and c:
            canvas.itemconfig(tag_text, text="9")
            canvas.itemconfig(tag_size, text="9")
            canvas.itemconfig(tag, text="9")
        elif selected_memory_size == "16MB" and d:
            canvas.itemconfig(tag_text, text="9")
            canvas.itemconfig(tag_size, text="9")
            canvas.itemconfig(tag, text="9")
        elif selected_memory_size == "16MB" and e:
            canvas.itemconfig(tag_text, text="9")
            canvas.itemconfig(tag_size, text="9")
            canvas.itemconfig(tag, text="9")
        elif selected_memory_size == "16MB" and f:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "16MB" and g:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "16MB" and h:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "16MB" and i:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "16MB" and j:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "16MB" and k:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "16MB" and l:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "16MB" and m:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "16MB" and n:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "16MB" and o:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "16MB" and p:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "16MB" and q:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "16MB" and r:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "16MB" and s:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        elif selected_memory_size == "16MB" and t:
            canvas.itemconfig(tag_text, text="6")
            canvas.itemconfig(tag_size, text="6")
            canvas.itemconfig(tag, text="6")
        #32MB
        if selected_memory_size == "32MB" and a:
            canvas.itemconfig(tag_text, text="10")
            canvas.itemconfig(tag_size, text="10")
            canvas.itemconfig(tag, text="10")
        elif selected_memory_size == "32MB" and b:
            canvas.itemconfig(tag_text, text="10")
            canvas.itemconfig(tag_size, text="10")
            canvas.itemconfig(tag, text="10")
        elif selected_memory_size == "32MB" and c:
            canvas.itemconfig(tag_text, text="10")
            canvas.itemconfig(tag_size, text="10")
            canvas.itemconfig(tag, text="10")
        elif selected_memory_size == "32MB" and d:
            canvas.itemconfig(tag_text, text="10")
            canvas.itemconfig(tag_size, text="10")
            canvas.itemconfig(tag, text="10")
        elif selected_memory_size == "32MB" and e:
            canvas.itemconfig(tag_text, text="10")
            canvas.itemconfig(tag_size, text="10")
            canvas.itemconfig(tag, text="10")
        elif selected_memory_size == "32MB" and f:
            canvas.itemconfig(tag_text, text="9")
            canvas.itemconfig(tag_size, text="9")
            canvas.itemconfig(tag, text="9")
        elif selected_memory_size == "32MB" and g:
            canvas.itemconfig(tag_text, text="9")
            canvas.itemconfig(tag_size, text="9")
            canvas.itemconfig(tag, text="9")
        elif selected_memory_size == "32MB" and h:
            canvas.itemconfig(tag_text, text="9")
            canvas.itemconfig(tag_size, text="9")
            canvas.itemconfig(tag, text="9")
        elif selected_memory_size == "32MB" and i:
            canvas.itemconfig(tag_text, text="9")
            canvas.itemconfig(tag_size, text="9")
            canvas.itemconfig(tag, text="9")
        elif selected_memory_size == "32MB" and j:
            canvas.itemconfig(tag_text, text="9")
            canvas.itemconfig(tag_size, text="9")
            canvas.itemconfig(tag, text="9")
        elif selected_memory_size == "32MB" and k:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "32MB" and l:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "32MB" and m:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "32MB" and n:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "32MB" and o:
            canvas.itemconfig(tag_text, text="8")
            canvas.itemconfig(tag_size, text="8")
            canvas.itemconfig(tag, text="8")
        elif selected_memory_size == "32MB" and p:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "32MB" and q:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "32MB" and r:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "32MB" and s:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")
        elif selected_memory_size == "32MB" and t:
            canvas.itemconfig(tag_text, text="7")
            canvas.itemconfig(tag_size, text="7")
            canvas.itemconfig(tag, text="7")

        #Update Block Location
        aa = selected_memory_size == "256KB" and selected_block_size == "2B"
        bb = selected_memory_size == "256KB" and selected_block_size == "4B"
        cc = selected_memory_size == "256KB" and selected_block_size == "8B"
        dd = selected_memory_size == "256KB" and selected_block_size == "16B"
        ee = selected_memory_size == "256KB" and selected_block_size == "32B"
        ff = selected_memory_size == "528KB" and selected_block_size == "2B"
        gg = selected_memory_size == "528KB" and selected_block_size == "4B"
        hh = selected_memory_size == "528KB" and selected_block_size == "8B"
        ii = selected_memory_size == "528KB" and selected_block_size == "16B"
        jj = selected_memory_size == "528KB" and selected_block_size == "32B"
        kk = selected_memory_size == "1MB" and selected_block_size == "2B"
        ll = selected_memory_size == "1MB" and selected_block_size == "4B"
        mm = selected_memory_size == "1MB" and selected_block_size == "8B"
        nn = selected_memory_size == "1MB" and selected_block_size == "16B"
        oo = selected_memory_size == "1MB" and selected_block_size == "32B"
        pp = selected_memory_size == "2MB" and selected_block_size == "2B"
        qq = selected_memory_size == "2MB" and selected_block_size == "4B"
        rr = selected_memory_size == "2MB" and selected_block_size == "8B"
        ss = selected_memory_size == "2MB" and selected_block_size == "16B"
        tt = selected_memory_size == "2MB" and selected_block_size == "32B"
        uu = selected_memory_size == "4MB" and selected_block_size == "2B"
        vv = selected_memory_size == "4MB" and selected_block_size == "4B"
        ww = selected_memory_size == "4MB" and selected_block_size == "8B"
        xx = selected_memory_size == "4MB" and selected_block_size == "16B"
        yy = selected_memory_size == "4MB" and selected_block_size == "32B"
        zz = selected_memory_size == "8MB" and selected_block_size == "2B"
        aaa = selected_memory_size == "8MB" and selected_block_size == "4B"
        bbb = selected_memory_size == "8MB" and selected_block_size == "8B"
        ccc = selected_memory_size == "8MB" and selected_block_size == "16B"
        ddd = selected_memory_size == "8MB" and selected_block_size == "32B"
        eee = selected_memory_size == "16MB" and selected_block_size == "2B"
        fff = selected_memory_size == "16MB" and selected_block_size == "4B"
        ggg = selected_memory_size == "16MB" and selected_block_size == "8B"
        hhh = selected_memory_size == "16MB" and selected_block_size == "16B"
        iii = selected_memory_size == "16MB" and selected_block_size == "32B"
        jjj = selected_memory_size == "32MB" and selected_block_size == "2B"
        kkk = selected_memory_size == "32MB" and selected_block_size == "4B"
        lll = selected_memory_size == "32MB" and selected_block_size == "8B"
        mmm = selected_memory_size == "32MB" and selected_block_size == "16B"
        nnn = selected_memory_size == "32MB" and selected_block_size == "32B"
        #256KB
        if aa:
            canvas.itemconfig(block_location, text="17")
        elif bb:
            canvas.itemconfig(block_location, text="16")
        elif cc:
            canvas.itemconfig(block_location, text="15")
        elif dd:
            canvas.itemconfig(block_location, text="14")
        elif ee:
            canvas.itemconfig(block_location, text="13")
        elif ff:
            canvas.itemconfig(block_location, text="18")
        elif gg:
            canvas.itemconfig(block_location, text="17")
        elif hh:
            canvas.itemconfig(block_location, text="16")
        elif ii:
            canvas.itemconfig(block_location, text="15")
        elif jj:
            canvas.itemconfig(block_location, text="14")
        elif kk:
            canvas.itemconfig(block_location, text="19")
        elif ll:
            canvas.itemconfig(block_location, text="18")
        elif mm:
            canvas.itemconfig(block_location, text="17")
        elif nn:
            canvas.itemconfig(block_location, text="16")
        elif oo:
            canvas.itemconfig(block_location, text="15")
        elif pp:
            canvas.itemconfig(block_location, text="20")
        elif qq:
            canvas.itemconfig(block_location, text="19")
        elif rr:
            canvas.itemconfig(block_location, text="18")
        elif ss:
            canvas.itemconfig(block_location, text="17")
        elif tt:
            canvas.itemconfig(block_location, text="16")
        elif uu:
            canvas.itemconfig(block_location, text="21")
        elif vv:
            canvas.itemconfig(block_location, text="20")
        elif ww:
            canvas.itemconfig(block_location, text="19")
        elif xx:
            canvas.itemconfig(block_location, text="18")
        elif yy:
            canvas.itemconfig(block_location, text="17")
        elif zz:
            canvas.itemconfig(block_location, text="22")
        elif aaa:
            canvas.itemconfig(block_location, text="21")
        elif bbb:
            canvas.itemconfig(block_location, text="20")
        elif ccc:
            canvas.itemconfig(block_location, text="19")
        elif ddd:
            canvas.itemconfig(block_location, text="18")
        elif eee:
            canvas.itemconfig(block_location, text="23")
        elif fff:
            canvas.itemconfig(block_location, text="22")
        elif ggg:
            canvas.itemconfig(block_location, text="21")
        elif hhh:
            canvas.itemconfig(block_location, text="20")
        elif iii:
            canvas.itemconfig(block_location, text="19")
        elif jjj:
            canvas.itemconfig(block_location, text="24")
        elif kkk:
            canvas.itemconfig(block_location, text="23")
        elif lll:
            canvas.itemconfig(block_location, text="22")
        elif mmm:
            canvas.itemconfig(block_location, text="21")
        elif nnn:
            canvas.itemconfig(block_location, text="20")

        #Update Cache Set and Set Number
        ss2 = selected_set_size == "2"
        ss4 = selected_set_size == "4"
        ss8 = selected_set_size == "8"

        #2blocks
        if a and ss2:
            canvas.itemconfig(pow_cs2, text="1")
            canvas.itemconfig(pow_cs3, text="14")
            canvas.itemconfig(sn_text, text="14")
            canvas.itemconfig(line_number, text="14")
            canvas.itemconfig(ln_num, text="14")
        elif b and ss2:
            canvas.itemconfig(pow_cs2, text="1")
            canvas.itemconfig(pow_cs3, text="13")
            canvas.itemconfig(sn_text, text="13")
            canvas.itemconfig(line_number, text="13")
            canvas.itemconfig(ln_num, text="13")
        elif c and ss2:
            canvas.itemconfig(pow_cs2, text="1")
            canvas.itemconfig(pow_cs3, text="12")
            canvas.itemconfig(sn_text, text="12")
            canvas.itemconfig(line_number, text="12")
            canvas.itemconfig(ln_num, text="12")
        elif d and ss2:
            canvas.itemconfig(pow_cs2, text="1")
            canvas.itemconfig(pow_cs3, text="11")
            canvas.itemconfig(sn_text, text="11")
            canvas.itemconfig(line_number, text="11")
            canvas.itemconfig(ln_num, text="11")
        elif e and ss2:
            canvas.itemconfig(pow_cs2, text="1")
            canvas.itemconfig(pow_cs3, text="10")
            canvas.itemconfig(sn_text, text="10")
            canvas.itemconfig(line_number, text="10")
            canvas.itemconfig(ln_num, text="10")
        elif f and ss2:
            canvas.itemconfig(pow_cs2, text="1")
            canvas.itemconfig(pow_cs3, text="15")
            canvas.itemconfig(sn_text, text="15")
            canvas.itemconfig(line_number, text="15")
            canvas.itemconfig(ln_num, text="15")
        elif g and ss2:
            canvas.itemconfig(pow_cs2, text="1")
            canvas.itemconfig(pow_cs3, text="14")
            canvas.itemconfig(sn_text, text="14")
            canvas.itemconfig(line_number, text="14")
            canvas.itemconfig(ln_num, text="14")
        elif h and ss2:
            canvas.itemconfig(pow_cs2, text="1")
            canvas.itemconfig(pow_cs3, text="13")
            canvas.itemconfig(sn_text, text="13")
            canvas.itemconfig(line_number, text="13")
            canvas.itemconfig(ln_num, text="13")
        elif i and ss2:
            canvas.itemconfig(pow_cs2, text="1")
            canvas.itemconfig(pow_cs3, text="12")
            canvas.itemconfig(sn_text, text="12")
            canvas.itemconfig(line_number, text="12")
            canvas.itemconfig(ln_num, text="12")
        elif j and ss2:
            canvas.itemconfig(pow_cs2, text="1")
            canvas.itemconfig(pow_cs3, text="11")
            canvas.itemconfig(sn_text, text="11")
            canvas.itemconfig(line_number, text="11")
            canvas.itemconfig(ln_num, text="11")
        elif k and ss2:
            canvas.itemconfig(pow_cs2, text="1")
            canvas.itemconfig(pow_cs3, text="16")
            canvas.itemconfig(sn_text, text="16")
            canvas.itemconfig(line_number, text="16")
            canvas.itemconfig(ln_num, text="16")
        elif l and ss2:
            canvas.itemconfig(pow_cs2, text="1")
            canvas.itemconfig(pow_cs3, text="15")
            canvas.itemconfig(sn_text, text="15")
            canvas.itemconfig(line_number, text="15")
            canvas.itemconfig(ln_num, text="15")
        elif m and ss2:
            canvas.itemconfig(pow_cs2, text="1")
            canvas.itemconfig(pow_cs3, text="14")
            canvas.itemconfig(sn_text, text="14")
            canvas.itemconfig(line_number, text="14")
            canvas.itemconfig(ln_num, text="14")
        elif n and ss2:
            canvas.itemconfig(pow_cs2, text="1")
            canvas.itemconfig(pow_cs3, text="13")
            canvas.itemconfig(sn_text, text="13")
            canvas.itemconfig(line_number, text="13")
            canvas.itemconfig(ln_num, text="13")
        elif o and ss2:
            canvas.itemconfig(pow_cs2, text="1")
            canvas.itemconfig(pow_cs3, text="12")
            canvas.itemconfig(sn_text, text="12")
            canvas.itemconfig(line_number, text="12")
            canvas.itemconfig(ln_num, text="12")
        elif p and ss2:
            canvas.itemconfig(pow_cs2, text="1")
            canvas.itemconfig(pow_cs3, text="17")
            canvas.itemconfig(sn_text, text="17")
            canvas.itemconfig(line_number, text="17")
            canvas.itemconfig(ln_num, text="17")
        elif q and ss2:
            canvas.itemconfig(pow_cs2, text="1")
            canvas.itemconfig(pow_cs3, text="16")
            canvas.itemconfig(sn_text, text="16")
            canvas.itemconfig(line_number, text="16")
            canvas.itemconfig(ln_num, text="16")
        elif r and ss2:
            canvas.itemconfig(pow_cs2, text="1")
            canvas.itemconfig(pow_cs3, text="15")
            canvas.itemconfig(sn_text, text="15")
            canvas.itemconfig(line_number, text="15")
            canvas.itemconfig(ln_num, text="15")
        elif s and ss2:
            canvas.itemconfig(pow_cs2, text="1")
            canvas.itemconfig(pow_cs3, text="14")
            canvas.itemconfig(sn_text, text="14")
            canvas.itemconfig(line_number, text="14")
            canvas.itemconfig(ln_num, text="14")
        elif t and ss2:
            canvas.itemconfig(pow_cs2, text="1")
            canvas.itemconfig(pow_cs3, text="13")
            canvas.itemconfig(sn_text, text="13")
            canvas.itemconfig(line_number, text="13")
            canvas.itemconfig(ln_num, text="13")

        #4blocks
        if a and ss4:
            canvas.itemconfig(pow_cs2, text="2")
            canvas.itemconfig(pow_cs3, text="13")
            canvas.itemconfig(sn_text, text="13")
            canvas.itemconfig(line_number, text="13")
            canvas.itemconfig(ln_num, text="13")
        elif b and ss4:
            canvas.itemconfig(pow_cs2, text="2")
            canvas.itemconfig(pow_cs3, text="12")
            canvas.itemconfig(sn_text, text="12")
            canvas.itemconfig(line_number, text="12")
            canvas.itemconfig(ln_num, text="12")
        elif c and ss4:
            canvas.itemconfig(pow_cs2, text="2")
            canvas.itemconfig(pow_cs3, text="11")
            canvas.itemconfig(sn_text, text="11")
            canvas.itemconfig(line_number, text="11")
            canvas.itemconfig(ln_num, text="11")
        elif d and ss4:
            canvas.itemconfig(pow_cs2, text="2")
            canvas.itemconfig(pow_cs3, text="10")
            canvas.itemconfig(sn_text, text="10")
            canvas.itemconfig(line_number, text="10")
            canvas.itemconfig(ln_num, text="10")
        elif e and ss4:
            canvas.itemconfig(pow_cs2, text="2")
            canvas.itemconfig(pow_cs3, text="9")
            canvas.itemconfig(sn_text, text="9")
            canvas.itemconfig(line_number, text="9")
            canvas.itemconfig(ln_num, text="9")
        elif f and ss4:
            canvas.itemconfig(pow_cs2, text="2")
            canvas.itemconfig(pow_cs3, text="14")
            canvas.itemconfig(sn_text, text="14")
            canvas.itemconfig(line_number, text="14")
            canvas.itemconfig(ln_num, text="14")
        elif g and ss4:
            canvas.itemconfig(pow_cs2, text="2")
            canvas.itemconfig(pow_cs3, text="13")
            canvas.itemconfig(sn_text, text="13")
            canvas.itemconfig(line_number, text="13")
            canvas.itemconfig(ln_num, text="13")
        elif h and ss4:
            canvas.itemconfig(pow_cs2, text="2")
            canvas.itemconfig(pow_cs3, text="12")
            canvas.itemconfig(sn_text, text="12")
            canvas.itemconfig(line_number, text="12")
            canvas.itemconfig(ln_num, text="12")
        elif i and ss4:
            canvas.itemconfig(pow_cs2, text="2")
            canvas.itemconfig(pow_cs3, text="11")
            canvas.itemconfig(sn_text, text="11")
            canvas.itemconfig(line_number, text="11")
            canvas.itemconfig(ln_num, text="11")
        elif j and ss4:
            canvas.itemconfig(pow_cs2, text="2")
            canvas.itemconfig(pow_cs3, text="10")
            canvas.itemconfig(sn_text, text="10")
            canvas.itemconfig(line_number, text="10")
            canvas.itemconfig(ln_num, text="10")
        elif k and ss4:
            canvas.itemconfig(pow_cs2, text="2")
            canvas.itemconfig(pow_cs3, text="15")
            canvas.itemconfig(sn_text, text="15")
            canvas.itemconfig(line_number, text="15")
            canvas.itemconfig(ln_num, text="15")
        elif l and ss4:
            canvas.itemconfig(pow_cs2, text="2")
            canvas.itemconfig(pow_cs3, text="14")
            canvas.itemconfig(sn_text, text="14")
            canvas.itemconfig(line_number, text="14")
            canvas.itemconfig(ln_num, text="14")
        elif m and ss4:
            canvas.itemconfig(pow_cs2, text="2")
            canvas.itemconfig(pow_cs3, text="13")
            canvas.itemconfig(sn_text, text="13")
            canvas.itemconfig(line_number, text="13")
            canvas.itemconfig(ln_num, text="13")
        elif n and ss4:
            canvas.itemconfig(pow_cs2, text="2")
            canvas.itemconfig(pow_cs3, text="12")
            canvas.itemconfig(sn_text, text="12")
            canvas.itemconfig(line_number, text="12")
            canvas.itemconfig(ln_num, text="12")
        elif o and ss4:
            canvas.itemconfig(pow_cs2, text="2")
            canvas.itemconfig(pow_cs3, text="11")
            canvas.itemconfig(sn_text, text="11")
            canvas.itemconfig(line_number, text="11")
            canvas.itemconfig(ln_num, text="11")
        elif p and ss4:
            canvas.itemconfig(pow_cs2, text="2")
            canvas.itemconfig(pow_cs3, text="16")
            canvas.itemconfig(sn_text, text="16")
            canvas.itemconfig(line_number, text="16")
            canvas.itemconfig(ln_num, text="16")
        elif q and ss4:
            canvas.itemconfig(pow_cs2, text="2")
            canvas.itemconfig(pow_cs3, text="15")
            canvas.itemconfig(sn_text, text="15")
            canvas.itemconfig(line_number, text="15")
            canvas.itemconfig(ln_num, text="15")
        elif r and ss4:
            canvas.itemconfig(pow_cs2, text="2")
            canvas.itemconfig(pow_cs3, text="14")
            canvas.itemconfig(sn_text, text="14")
            canvas.itemconfig(line_number, text="14")
            canvas.itemconfig(ln_num, text="14")
        elif s and ss4:
            canvas.itemconfig(pow_cs2, text="2")
            canvas.itemconfig(pow_cs3, text="13")
            canvas.itemconfig(sn_text, text="13")
            canvas.itemconfig(line_number, text="13")
            canvas.itemconfig(ln_num, text="13")
        elif t and ss4:
            canvas.itemconfig(pow_cs2, text="2")
            canvas.itemconfig(pow_cs3, text="12")
            canvas.itemconfig(sn_text, text="12")
            canvas.itemconfig(line_number, text="12")
            canvas.itemconfig(ln_num, text="12")

        #8blocks
        if a and ss8:
            canvas.itemconfig(pow_cs2, text="3")
            canvas.itemconfig(pow_cs3, text="12")
            canvas.itemconfig(sn_text, text="12")
            canvas.itemconfig(line_number, text="12")
            canvas.itemconfig(ln_num, text="12")
        elif b and ss8:
            canvas.itemconfig(pow_cs2, text="3")
            canvas.itemconfig(pow_cs3, text="11")
            canvas.itemconfig(sn_text, text="11")
            canvas.itemconfig(line_number, text="11")
            canvas.itemconfig(ln_num, text="11")
        elif c and ss8:
            canvas.itemconfig(pow_cs2, text="3")
            canvas.itemconfig(pow_cs3, text="10")
            canvas.itemconfig(sn_text, text="10")
            canvas.itemconfig(line_number, text="10")
            canvas.itemconfig(ln_num, text="10")
        elif d and ss8:
            canvas.itemconfig(pow_cs2, text="3")
            canvas.itemconfig(pow_cs3, text="9")
            canvas.itemconfig(sn_text, text="9")
            canvas.itemconfig(line_number, text="9")
            canvas.itemconfig(ln_num, text="9")
        elif e and ss8:
            canvas.itemconfig(pow_cs2, text="3")
            canvas.itemconfig(pow_cs3, text="8")
            canvas.itemconfig(sn_text, text="8")
            canvas.itemconfig(line_number, text="8")
            canvas.itemconfig(ln_num, text="8")
        elif f and ss8:
            canvas.itemconfig(pow_cs2, text="3")
            canvas.itemconfig(pow_cs3, text="13")
            canvas.itemconfig(sn_text, text="13")
            canvas.itemconfig(line_number, text="13")
            canvas.itemconfig(ln_num, text="13")
        elif g and ss8:
            canvas.itemconfig(pow_cs2, text="3")
            canvas.itemconfig(pow_cs3, text="12")
            canvas.itemconfig(sn_text, text="12")
            canvas.itemconfig(line_number, text="12")
            canvas.itemconfig(ln_num, text="12")
        elif h and ss8:
            canvas.itemconfig(pow_cs2, text="3")
            canvas.itemconfig(pow_cs3, text="11")
            canvas.itemconfig(sn_text, text="11")
            canvas.itemconfig(line_number, text="11")
            canvas.itemconfig(ln_num, text="11")
        elif i and ss8:
            canvas.itemconfig(pow_cs2, text="3")
            canvas.itemconfig(pow_cs3, text="10")
            canvas.itemconfig(sn_text, text="10")
            canvas.itemconfig(line_number, text="10")
            canvas.itemconfig(ln_num, text="10")
        elif j and ss8:
            canvas.itemconfig(pow_cs2, text="3")
            canvas.itemconfig(pow_cs3, text="9")
            canvas.itemconfig(sn_text, text="9")
            canvas.itemconfig(line_number, text="9")
            canvas.itemconfig(ln_num, text="9")
        elif k and ss8:
            canvas.itemconfig(pow_cs2, text="3")
            canvas.itemconfig(pow_cs3, text="14")
            canvas.itemconfig(sn_text, text="14")
            canvas.itemconfig(line_number, text="14")
            canvas.itemconfig(ln_num, text="14")
        elif l and ss8:
            canvas.itemconfig(pow_cs2, text="3")
            canvas.itemconfig(pow_cs3, text="13")
            canvas.itemconfig(sn_text, text="13")
            canvas.itemconfig(line_number, text="13")
            canvas.itemconfig(ln_num, text="13")
        elif m and ss8:
            canvas.itemconfig(pow_cs2, text="3")
            canvas.itemconfig(pow_cs3, text="12")
            canvas.itemconfig(sn_text, text="12")
            canvas.itemconfig(line_number, text="12")
            canvas.itemconfig(ln_num, text="12")
        elif n and ss8:
            canvas.itemconfig(pow_cs2, text="3")
            canvas.itemconfig(pow_cs3, text="11")
            canvas.itemconfig(sn_text, text="11")
            canvas.itemconfig(line_number, text="11")
            canvas.itemconfig(ln_num, text="11")
        elif o and ss8:
            canvas.itemconfig(pow_cs2, text="3")
            canvas.itemconfig(pow_cs3, text="10")
            canvas.itemconfig(sn_text, text="10")
            canvas.itemconfig(line_number, text="10")
            canvas.itemconfig(ln_num, text="10")
        elif p and ss8:
            canvas.itemconfig(pow_cs2, text="3")
            canvas.itemconfig(pow_cs3, text="15")
            canvas.itemconfig(sn_text, text="15")
            canvas.itemconfig(line_number, text="15")
            canvas.itemconfig(ln_num, text="15")
        elif q and ss8:
            canvas.itemconfig(pow_cs2, text="3")
            canvas.itemconfig(pow_cs3, text="14")
            canvas.itemconfig(sn_text, text="14")
            canvas.itemconfig(line_number, text="14")
            canvas.itemconfig(ln_num, text="14")
        elif r and ss8:
            canvas.itemconfig(pow_cs2, text="3")
            canvas.itemconfig(pow_cs3, text="13")
            canvas.itemconfig(sn_text, text="13")
            canvas.itemconfig(line_number, text="13")
            canvas.itemconfig(ln_num, text="13")
        elif s and ss8:
            canvas.itemconfig(pow_cs2, text="3")
            canvas.itemconfig(pow_cs3, text="12")
            canvas.itemconfig(sn_text, text="12")
            canvas.itemconfig(line_number, text="12")
            canvas.itemconfig(ln_num, text="12")
        elif t and ss8:
            canvas.itemconfig(pow_cs2, text="3")
            canvas.itemconfig(pow_cs3, text="11")
            canvas.itemconfig(sn_text, text="11")
            canvas.itemconfig(line_number, text="11")
            canvas.itemconfig(ln_num, text="11")
        

####################################################

window = Tk()
window.title("Cache Mapping System")

window.geometry("1171x607")
window.configure(bg = "#FFFFFF")

####################################################

#CANVAS
canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 607,
    width = 1171,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)
canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    741.0,
    333.0,
    image=image_image_1
)
image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    157.0,
    333.0,
    image=image_image_2
)
canvas.create_rectangle(
    0.0,
    0.0,
    1171.0,
    59.0,
    fill="#333333",
    outline=""
)
canvas.create_text(
    85.0,
    10.0,
    anchor="nw",
    text="Cache",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 25 * -1)
)
canvas.create_text(
    168.0,
    10.0,
    anchor="nw",
    text="mapping.",
    fill="#FFFFFF",
    font=("Poppins Light", 25 * -1)
)
image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    46.0,
    29.0,
    image=image_image_3
)

####################################################

#CANVAS FOR DIRECT MAPPING

#CANVAS - MEM
mem = canvas.create_text(
            417.0, 
            282.0, 
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
equal_mem1 = canvas.create_text(
            536.0,
            282.0, 
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
memory_text = canvas.create_text(
            568.0,
            282.0, 
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
equal_mem2 = canvas.create_text(
            632.0,
            282.0, 
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
two_mem1 = canvas.create_text(
            661.0,
            282.0, 
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
pow_mem1 = canvas.create_text(
            672.0,
            278.0,
            anchor="nw",
            text="",
            fill="#C52E2E",
            font=("Poppins SemiBold", 9 * -1)
            )
mul_mem = canvas.create_text(
            691.0,
            282.0, 
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
two_mem2 = canvas.create_text(
            717.0,
            282.0, 
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
pow_mem2 = canvas.create_text(
            730.0,
            278.0,
            anchor="nw",
            text="",
            fill="#C52E2E",
            font=("Poppins SemiBold", 9 * -1)
            )
equal_mem3 = canvas.create_text(
            760.0,
            282.0, 
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
two_mem3 = canvas.create_text(
            778.0,
            282.0, 
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
pow_mem3 = canvas.create_text(
            789.0,
            278.0,
            anchor="nw",
            text="",
            fill="#C52E2E",
            font=("Poppins SemiBold", 9 * -1)
            )
line_mem = canvas.create_text(
            808.0,
            280.0, 
            anchor="nw",
            text="",
            fill="#9A2121",
            font=("Poppins SemiBold", 11 * -1)
            )

#CANVAS - PA
pa = canvas.create_text(
            854.0,
            282.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
equal_pa = canvas.create_text(
            993.0,
            282.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
addr_text = canvas.create_text(
            1012.0,
            282.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
bits_pa = canvas.create_text(
            1032.0,
            282.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )

#CANVAS - CACHE
cache = canvas.create_text(
            417.0,
            327.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
equal_c1 = canvas.create_text(
            536.0,
            327.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
cache_text = canvas.create_text(
            568.0,
            327.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
equal_c2 = canvas.create_text(
            632.0,
            327.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
two_c1 = canvas.create_text(
            661.0,
            327.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
pow_c1 = canvas.create_text(
            672.0,
            324.0,
            anchor="nw",
            text="",
            fill="#C52E2E",
            font=("Poppins SemiBold", 9 * -1)
            )
mul_c = canvas.create_text(
            691.0,
            327.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
two_c2 = canvas.create_text(
            717.0,
            327.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
pow_c2 = canvas.create_text(
            730.0,
            324.0,
            anchor="nw",
            text="",
            fill="#C52E2E",
            font=("Poppins SemiBold", 9 * -1)
            )
equal_c3 = canvas.create_text(
            760.0,
            327.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
two_c3 = canvas.create_text(
            778.0,
            327.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
pow_c3 = canvas.create_text(
            789.0,
            324.0,
            anchor="nw",
            text="",
            fill="#C52E2E",
            font=("Poppins SemiBold", 9 * -1)
            )

#CANVAS - BLOCK
block = canvas.create_text(
            417.0,
            369.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
equal_b1 = canvas.create_text(
            536.0,
            369.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
block_text = canvas.create_text(
            568.0,
            369.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
equal_b2 = canvas.create_text(
            632.0,
            369.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
two_b1 = canvas.create_text(
            661.0,
            369.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
pow_b1 = canvas.create_text(
            672.0,
            365.0,
            anchor="nw",
            text="",
            fill="#C52E2E",
            font=("Poppins SemiBold", 9 * -1)
            )
mul_b = canvas.create_text(
            691.0,
            369.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
two_b2 = canvas.create_text(
            717.0,
            369.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
pow_b2 = canvas.create_text(
            730.0,
            365.0,
            anchor="nw",
            text="",
            fill="#C52E2E",
            font=("Poppins SemiBold", 9 * -1)
            )
equal_b3 = canvas.create_text(
            760.0,
            369.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
two_b3 = canvas.create_text(
            778.0,
            369.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
pow_b3 = canvas.create_text(
            789.0,
            365.0,
            anchor="nw",
            text="",
            fill="#C52E2E",
            font=("Poppins SemiBold", 9 * -1)
            )
line_block = canvas.create_text(
            808.0,
            367.0,
            anchor="nw",
            text="",
            fill="#9A2121",
            font=("Poppins SemiBold", 11 * -1)
            )

#CANVAS - BLOCK OFFSET
bo = canvas.create_text(
            854.0,
            369.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
equal_bo = canvas.create_text(
            993.0,
            369.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
offset = canvas.create_text(
            1012.0,
            369.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
bits_bo = canvas.create_text(
            1032.0,
            369.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )

#CANVAS - CACHE LINE
cache_line = canvas.create_text(
            417.0,
            416.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
equal_cl1 = canvas.create_text(
            536.0,
            416.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
for_cl = canvas.create_text(
            568.0,
            416.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
equal_cl2 = canvas.create_text(
            632.0,
            416.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
two_cl1 = canvas.create_text(
            661.0,
            407.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
pow_cl1 = canvas.create_text(
            672.0,
            403.0,
            anchor="nw",
            text="",
            fill="#C52E2E",
            font=("Poppins SemiBold", 9 * -1)
            )
two_cl2 = canvas.create_text(
            661.0,
            432.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
pow_cl2 = canvas.create_text(
            672.0,
            428.0,
            anchor="nw",
            text="",
            fill="#C52E2E",
            font=("Poppins SemiBold", 9 * -1)
            )
equal_cl3 = canvas.create_text(
            704.0,
            416.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
two_cl3 = canvas.create_text(
            722.0,
            416.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )   
pow_cl3 = canvas.create_text(
            735.0,
            411.0,
            anchor="nw",
            text="",
            fill="#C52E2E",
            font=("Poppins SemiBold", 9 * -1)
            )
div = canvas.create_text(
            653.0,
            414.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 9 * -1)
            )
line_linenum = canvas.create_text(
            758.0,
            414.0,
            anchor="nw",
            text="",
            fill="#9A2121",
            font=("Poppins SemiBold", 11 * -1)
            )

#CANVAS - LINE NUMBER
ln = canvas.create_text(
            854.0,
            416.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
equal_ln = canvas.create_text(
            993.0,
            416.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
ln_text = canvas.create_text(
            1012.0,
            416.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
bits_ln = canvas.create_text(
            1032.0,
            416.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )

#CANVAS - TAG
tagging = canvas.create_text(
            417.0,
            466.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
equal_tag1 = canvas.create_text(
            536.0,
            466.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
for_tag = canvas.create_text(
            568.0,
            466.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
equal_tag2 = canvas.create_text(
            673.0,
            466.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
pa_text = canvas.create_text(
            698.0,
            466.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
minus = canvas.create_text(
            723.0,
            466.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
left = canvas.create_text(
            740.0,
            466.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
bo_text = canvas.create_text(
            757.0,
            466.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
plus = canvas.create_text(
            771.0,
            466.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
ln_num = canvas.create_text(
            788.0,
            466.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
right = canvas.create_text(
            806.0,
            466.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
equal_tag3 = canvas.create_text(
            831.0,
            466.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
tag_text = canvas.create_text(
            850.0,
            466.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
bits_tag = canvas.create_text(
            870.0,
            466.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )

#CANVAS - TAG DIRECTORY SIZE
tag_size = canvas.create_text(
            664.0,
            508.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
mul_tds = canvas.create_text(
            691.0,
            508.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
two_tds = canvas.create_text(
            717.0,
            508.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
cl_size = canvas.create_text(
            730.0,
            505.0,
            anchor="nw",
            text="",
            fill="#C52E2E",
            font=("Poppins SemiBold", 9 * -1)
            )
bits_tds = canvas.create_text(
            753.0,
            508.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
tag_size_title = canvas.create_text(
            417.0,
            508.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
equal_tds2 = canvas.create_text(
            536.0,
            508.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
for_tds = canvas.create_text(
            568.0,
            508.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
equal_tds1 = canvas.create_text(
            632.0,
            508.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )

####################################################

#CANVAS FOR SET ASSOCIATIVE

#CANVAS - CACHE SET
cache_set = canvas.create_text(
            416.0,
            551.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
equal_cs1 = canvas.create_text(
            534.0,
            551.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
for_cs = canvas.create_text(
            568.0,
            551.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
equal_cs2 = canvas.create_text(
            645.0,
            551.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
two_cs1 = canvas.create_text(
            672.0,
            543.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
pow_cs1 = canvas.create_text(
            683.0,
            537.0,
            anchor="nw",
            text="",
            fill="#C52E2E",
            font=("Poppins SemiBold", 9 * -1)
            )
div_css = canvas.create_text(
            662.0,
            550.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 9 * -1)
            )
two_cs2 = canvas.create_text(
            672.0,
            565.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
pow_cs2 = canvas.create_text(
            683.0,
            563.0,
            anchor="nw",
            text="",
            fill="#C52E2E",
            font=("Poppins SemiBold", 9 * -1)
            )
equal_cs3 = canvas.create_text(
            715.0,
            551.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
two_cs3 = canvas.create_text(
            740.0,
            551.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
pow_cs3 = canvas.create_text(
            752.0,
            546.0,
            anchor="nw",
            text="",
            fill="#C52E2E",
            font=("Poppins SemiBold", 9 * -1)
            )
line_setnum = canvas.create_text(
            770.0,
            550.0,
            anchor="nw",
            text="",
            fill="#9A2121",
            font=("Poppins SemiBold", 11 * -1)
            )

#CANVAS - SET NUMBER
setnum = canvas.create_text(
            854.0,
            551.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
equal_sn = canvas.create_text(
            991.0,
            551.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
sn_text = canvas.create_text(
            1012.0,
            551.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )
bits_sn = canvas.create_text(
            1032.0,
            551.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )

####################################################

#CANVAS - MAIN MEMORY VIEW
image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    554.0,
    205.0,
    image=image_image_8
)

#BLOCK LOCATION
block_location = canvas.create_text(
            485.0,
            194.0,
            anchor="nw",
            text="",
            fill="#C53939",
            font=("Poppins SemiBold", 15 * -1)
            )
bits_block_location = canvas.create_text(
            506.0,
            194.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 15 * -1)
            )

#BLOCK OFFSET
block_offset = canvas.create_text(
            613.0,
            194.0,
            anchor="nw",
            text="",
            fill="#C53939",
            font=("Poppins SemiBold", 15 * -1)
            )
bits_block_offset = canvas.create_text(
            626.0,
            194.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 15 * -1)
            )

####################################################

#CACHE VIEW

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    918.0,
    205.0,
    image=image_image_9
)

#TAG
tag = canvas.create_text(
            815.0,
            194.0,
            anchor="nw",
            text="",
            fill="#C53939",
            font=("Poppins SemiBold", 15 * -1)
            )
bits_tagging = canvas.create_text(
            830.0,
            194.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 15 * -1)
            )

#LINE NUMBER
line_number = canvas.create_text(
            895.0,
            194.0,
            anchor="nw",
            text="",
            fill="#C53939",
            font=("Poppins SemiBold", 15 * -1)
            )
bits_line_number = canvas.create_text(
            914.0,
            194.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 15 * -1)
            )

#BLOCK OFFSET
block_offset_cache = canvas.create_text(
            977.0,
            194.0,
            anchor="nw",
            text="",
            fill="#C53939",
            font=("Poppins SemiBold", 15 * -1)
            )
bits_block_offset_cache = canvas.create_text(
            991.0,
            194.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 15 * -1)
            )

####################################################

#INPUT FRAME

#Memory_Cache_Parameters
canvas.create_rectangle(
    0.0,
    108.0,
    312.0,
    144.0,
    fill="#D9D9D9",
    outline="")
canvas.create_text(
    51.0,
    115.0,
    anchor="nw",
    text="Memory Cache",
    fill="#333333",
    font=("Poppins SemiBold", 15 * -1)
)
canvas.create_text(
    171.0,
    115.0,
    anchor="nw",
    text="Parameters",
    fill="#333333",
    font=("Poppins Light", 15 * -1)
)

####################################################

#Memory Size
canvas.create_text(
    28.0,
    163.0,
    anchor="nw",
    text="Memory Size",
    fill="#333333",
    font=("Poppins SemiBold", 15 * -1)
)
canvas.create_text(
    137.0,
    163.0,
    anchor="nw",
    text=":",
    fill="#333333",
    font=("Poppins SemiBold", 15 * -1)
)
#dropdown memory-size
mem_sizes = ["256KB", "528KB", "1MB", "2MB", "4MB", "8MB", "16MB", "32MB",]
ms_var = tk.StringVar()
ms = ttk.Combobox(window, textvariable=ms_var, values=mem_sizes, width=15)
ms.set("256KB")
ms.pack(padx=10, pady=10)
ms.place(x=155.0, y=163.0)

####################################################

#Cache Size
canvas.create_text(
    28.0,
    200.0,
    anchor="nw",
    text="Cache Size",
    fill="#333333",
    font=("Poppins SemiBold", 15 * -1)
)
canvas.create_text(
    137.0,
    200.0,
    anchor="nw",
    text=":",
    fill="#333333",
    font=("Poppins SemiBold", 15 * -1)
)
#dropdown cache-size
cache_sizes = ["64KB", "128KB", "256KB", "528KB"]
cs_var = tk.StringVar()
cs = ttk.Combobox(window, textvariable=cs_var, values=cache_sizes, width=15)
cs.set("64KB")
cs.pack(padx=10, pady=10)
cs.place(x=155.0, y=200.0)

####################################################

#Block Size
canvas.create_text(
    28.0,
    235.0,
    anchor="nw",
    text="Block Size",
    fill="#333333",
    font=("Poppins SemiBold", 15 * -1)
)
canvas.create_text(
    137.0,
    235.0,
    anchor="nw",
    text=":",
    fill="#333333",
    font=("Poppins SemiBold", 15 * -1)
)
#dropdown block-size
block_sizes = ["2B", "4B", "8B", "16B", "32B"]
bs_var = tk.StringVar()
bs = ttk.Combobox(window, textvariable=bs_var, values=block_sizes, width=15)
bs.set("2B")
bs.pack(padx=10, pady=10)
bs.place(x=155.0, y=235.0)

####################################################

#Cache_Scheme
canvas.create_rectangle(
    0.0,
    288.0,
    312.0,
    324.0,
    fill="#D9D9D9",
    outline="")
canvas.create_text(
    98.0,
    295.0,
    anchor="nw",
    text="Cache",
    fill="#333333",
    font=("Poppins SemiBold", 15 * -1)
)
canvas.create_text(
    152.0,
    295.0,
    anchor="nw",
    text="Scheme",
    fill="#333333",
    font=("Poppins Light", 15 * -1)
)

####################################################

#Radio Option
canvas.create_text(
    27.0,
    340.0,
    anchor="nw",
    text="Direct Mapping",
    fill="#333333",
    font=("Poppins SemiBold", 15 * -1)
)
canvas.create_text(
    27.0,
    375.0,
    anchor="nw",
    text="Set Associative",
    fill="#333333",
    font=("Poppins SemiBold", 15 * -1)
)
#radio menu
def on_radio_change():
    selected_option = radio_var.get()

radio_var = tk.StringVar()
radio_var.set("Option 1")
dm = tk.Radiobutton(window, variable=radio_var, value="Option 1", command=on_radio_change, bg="#C9C8A8")
sa = tk.Radiobutton(window, variable=radio_var, value="Option 2", command=on_radio_change, bg="#C9C8A8")
dm.pack(pady=5)
sa.pack(pady=5)
dm.place(x=155.0, y=340.0)
sa.place(x=155.0, y=375.0)

####################################################

#Set Size
canvas.create_text(
    27.0,
    415.0,
    anchor="nw",
    text="Set Size",
    fill="#333333",
    font=("Poppins SemiBold", 15 * -1)
)
canvas.create_text(
    92.0,
    415.0,
    anchor="nw",
    text=":",
    fill="#333333",
    font=("Poppins SemiBold", 15 * -1)
)
#dropdown set-size
set_sizes = ["2", "4", "8"]
ss_var = tk.StringVar()
ss = ttk.Combobox(window, textvariable=ss_var, values=set_sizes, width=3)
ss.set("2")
ss.pack(padx=10, pady=10)
ss.place(x=110.0, y=415.0)
#blocks text
canvas.create_text(
    155.0,
    415.0,
    anchor="nw",
    text="Blocks",
    fill="#333333",
    font=("Poppins Light", 14 * -1)
)

####################################################

#Map Button
map_button = tk.Button(window, text="Map", font=("Poppins SemiBold", 10), background = '#333333', foreground = 'white', command=submit_button_clicked)
map_button.pack(pady=10)
map_button.place(
    x=104.0,
    y=497.0,
    width=111.0,
    height=35.0
)

####################################################

#OUTPUT FRAME

#Title
canvas.create_text(
    707.0,
    88.0,
    anchor="nw",
    text="Out",
    fill="#333333",
    font=("Poppins SemiBold", 20 * -1)
)
canvas.create_text(
    744.0,
    88.0,
    anchor="nw",
    text="put",
    fill="#333333",
    font=("Poppins Light", 20 * -1)
)

#Main Memory View
canvas.create_text(
    483.0,
    144.0,
    anchor="nw",
    text="Main Memory",
    fill="#333333",
    font=("Poppins SemiBold", 15 * -1)
)

canvas.create_text(
    592.0,
    144.0,
    anchor="nw",
    text="View",
    fill="#333333",
    font=("Poppins Light", 15 * -1)
)
canvas.create_text(
    475.0,
    234.0,
    anchor="nw",
    text="Block",
    fill="#333333",
    font=("Poppins SemiBold", 11 * -1)
)
canvas.create_text(
    508.0,
    234.0,
    anchor="nw",
    text="Location",
    fill="#333333",
    font=("Poppins Light", 11 * -1)
)
canvas.create_text(
    600.0,
    234.0,
    anchor="nw",
    text="Block",
    fill="#333333",
    font=("Poppins SemiBold", 11 * -1)
)
canvas.create_text(
    633.0,
    234.0,
    anchor="nw",
    text="Offset",
    fill="#333333",
    font=("Poppins Light", 11 * -1)
)

#Cache View
canvas.create_text(
    965.0,
    234.0,
    anchor="nw",
    text="Block",
    fill="#333333",
    font=("Poppins SemiBold", 11 * -1)
)

canvas.create_rectangle(
    884.0,
    233.0,
    918.0,
    251.0,
    fill="#E1E1E1",
    outline="")

dm_view = canvas.create_text(
            881.0,
            234.0,
            anchor="nw",
            text="Line",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )

sa_view = canvas.create_text(
            885.0,
            234.0,
            anchor="nw",
            text="",
            fill="#333333",
            font=("Poppins SemiBold", 11 * -1)
            )

canvas.create_text(
    998.0,
    234.0,
    anchor="nw",
    text="Offset",
    fill="#333333",
    font=("Poppins Light", 11 * -1)
)

canvas.create_text(
    906.0,
    234.0,
    anchor="nw",
    text="Number",
    fill="#333333",
    font=("Poppins Light", 11 * -1)
)

canvas.create_text(
    827.0,
    234.0,
    anchor="nw",
    text="Tag",
    fill="#333333",
    font=("Poppins SemiBold", 11 * -1)
)

canvas.create_text(
    875.0,
    144.0,
    anchor="nw",
    text="Cache",
    fill="#333333",
    font=("Poppins SemiBold", 15 * -1)
)

canvas.create_text(
    929.0,
    144.0,
    anchor="nw",
    text="View",
    fill="#333333",
    font=("Poppins Light", 15 * -1)
)

window.resizable(False, False)
window.mainloop()
